import AutoAwesomeIcon from '@mui/icons-material/AutoAwesome';
import BookmarkAddIcon from '@mui/icons-material/BookmarkAdd';
import DashboardIcon from '@mui/icons-material/Dashboard';
import EditIcon from '@mui/icons-material/Edit';
import TabContext from '@mui/lab/TabContext';
import TabList from '@mui/lab/TabList';
import TabPanel from '@mui/lab/TabPanel';
import { Box, Chip, Divider, Grid, IconButton, Tooltip } from '@mui/material';
import Tab from '@mui/material/Tab';
import React, { useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import AiSolutionContent from 'src/components/aisolutioncontent/AiSolutionContent';
import Breadcrumb from 'src/components/shared/breadcrumb/Breadcrumb';
import DashboardCard from 'src/components/shared/DashboardCard';
import HumanizedDate from 'src/components/shared/HumanizedDate';
import SnackBarInfo from 'src/layouts/full/shared/SnackBar/SnackBarInfo';
import { useDispatch, useSelector } from 'src/store/Store';
import {
  closeVulnerability,
  fetchVulnerabilityById,
} from 'src/store/vulnerabilities/ManagementVulnSlice';
import { vulnerabilitySolution } from 'src/types/solutions/vulnerabilitySolution';
import { managementVulnerabilityType } from 'src/types/vulnerabilities/vulnerabilityManagementType';
import { formatDate } from 'src/utils/dateFormat';
import CloseVulnerabilityModal from './closeVulnerabilityModal';
import ManagedVulnerabilityDetail from './managedVulnerabilityDetail';
interface Props {
  vulnerability: managementVulnerabilityType;
}

const ManagedVulnerability: React.FC<Props> = ({ vulnerability }) => {
  const { t, i18n } = useTranslation();
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const selectedVulnerability: managementVulnerabilityType = useSelector(
    (state: any) => state.managementVulnReducer.selectedVulnerability?.vulnerability,
  );

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [vulnerabilityToClose, setVulnerabilityToClose] =
    useState<managementVulnerabilityType | null>(null);
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] = useState<
    'success' | 'info' | 'warning' | 'error'
  >('success');
  const [openDialog, setOpenDialog] = useState(false);
  let statusLabel = '';
  let statusColor: 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' =
    'default';

  if (selectedVulnerability?.status === 'OPEN') {
    statusLabel = `${t('vulnerabilities.management.status')}: ${t(
      'vulnerabilities.management.open',
    )}`;
    statusColor = 'primary';
  } else if (selectedVulnerability?.status === 'CLOSED') {
    statusLabel = t('vulnerabilities.management.closed');
    statusColor = 'success';
  }

  const vulnerabilitySolutionParameters: vulnerabilitySolution = {
    report_id: selectedVulnerability.report_id,
    tool: selectedVulnerability.tool,
    vulnerability_id: selectedVulnerability.vulnerability_id!,
    vulnerability_name: selectedVulnerability.name,
  };

  const COMMON_TAB = [
    {
      value: 'overview',
      icon: <DashboardIcon />,
      label: `${t('vulnerabilities.management.overview')}`,
      disabled: false,
      content: <ManagedVulnerabilityDetail vulnerability={selectedVulnerability!} />,
    },
    {
      value: 'ai_solution',
      icon: <AutoAwesomeIcon />,
      label: `${t('vulnerabilities.management.ai_solution')}`,
      disabled: false,
      content: <AiSolutionContent vulnerabilityProps={vulnerabilitySolutionParameters} />,
    },
  ];

  const [value, setValue] = React.useState('overview');

  const handleChange = (event: React.SyntheticEvent, newValue: string) => {
    setValue(newValue);
  };

  const handleManagedVulnFormClick = (id: number | string) => {
    navigate(`/vulnerabilities/management/form/${id}`);
  };

  const handleVulnModalClick = (vulnerability: managementVulnerabilityType) => {
    setVulnerabilityToClose(vulnerability);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
  };

  const handleConfirmDelete = async (closureData: {
    closure_reason: string;
    closure_date: string;
    status: string;
  }) => {
    if (!vulnerabilityToClose) return;

    try {
      await dispatch(closeVulnerability(vulnerabilityToClose?.id!, closureData));

      setVulnerabilityToClose(null);
      setIsModalOpen(false);
      handleFormSubmit(
        `${t('vulnerabilities.management.managed_vulnerability_closed_successfully')}`,
        'success',
      );

      await dispatch(fetchVulnerabilityById(Number(vulnerability.id)));
    } catch (error) {
      console.error('Error closing vulnerability:', error);
      handleFormSubmit(`${t('vulnerabilities.management.error_closing')}`, 'error');
    }
  };

  const handleCloseDialog = () => {
    setOpenDialog(false);
    setVulnerabilityToClose(null);
  };

  useEffect(() => {
    if (snackbarMessage && snackbarSeverity) {
      setSnackbarOpen(true);
    }
  }, [snackbarMessage, snackbarSeverity]);

  const handleFormSubmit = (
    message: string,
    severity: 'success' | 'info' | 'warning' | 'error',
  ) => {
    setSnackbarMessage(message);
    setSnackbarSeverity(severity);
    setSnackbarOpen(false);
    handleCloseDialog();
  };

  return (
    <Grid container>
      <Grid item xs={12} xl={12}>
        <Breadcrumb title={selectedVulnerability?.name} subtitle="">
          {/* Wrap all chips and buttons in a single Box */}
          <Box>
            <Box display="flex" flexWrap="wrap" gap={1} mb={3} mt={2}>
              {/* Existing Chips */}
              <Chip
                label={`${t('vulnerabilities.management.requires_attention')}`}
                color="info"
                variant="outlined"
              />

              {/* Status Chip */}
              <Chip label={statusLabel} color={statusColor} variant="outlined" />

              {/* Closure Date Chip with Tooltip (only if closure_date exists) */}
              {selectedVulnerability?.closure_date ? (
                <Tooltip title={<HumanizedDate dateString={selectedVulnerability?.closure_date} />}>
                  <Chip
                    label={`${t('vulnerabilities.management.closure_date')}: ${formatDate(
                      selectedVulnerability?.closure_date,
                      i18n.language,
                    )}`}
                    variant="outlined"
                  />
                </Tooltip>
              ) : selectedVulnerability?.estimated_closure_date ? (
                <Tooltip
                  title={
                    <HumanizedDate dateString={selectedVulnerability?.estimated_closure_date!} />
                  }
                >
                  <Chip
                    label={`${t('vulnerabilities.management.estimated_closure_date')}: ${formatDate(
                      selectedVulnerability?.estimated_closure_date,
                      i18n.language,
                    )}`}
                    variant="outlined"
                  />
                </Tooltip>
              ) : null}

              {/* Closure Reason Chip (only if closure_reason exists) */}
              {selectedVulnerability?.closure_reason && (
                <Chip
                  label={`${t('vulnerabilities.management.closure_reason')}: ${
                    selectedVulnerability.closure_reason
                  }`}
                  color="secondary"
                  variant="outlined"
                />
              )}
            </Box>

            {/* Action Buttons in a single row */}
            <Box display="flex" gap={2} mt={2} alignItems="center">
              {/* Edit Button */}
              <Tooltip title={t('vulnerabilities.management.add_information')}>
                <IconButton
                  color="primary"
                  onClick={() => handleManagedVulnFormClick(selectedVulnerability?.id!)}
                  disabled={selectedVulnerability?.status === 'CLOSED'}
                >
                  <EditIcon />
                </IconButton>
              </Tooltip>

              {/* Bookmark Button */}
              <Tooltip title={t('vulnerabilities.management.close_vuln')}>
                <IconButton
                  color="secondary"
                  onClick={() => handleVulnModalClick(selectedVulnerability)}
                  disabled={selectedVulnerability?.status === 'CLOSED'}
                >
                  <BookmarkAddIcon />
                </IconButton>
              </Tooltip>
            </Box>
          </Box>
        </Breadcrumb>
      </Grid>
      {/* Alerts Table Section */}
      <Grid item xs={12} xl={12}>
        <DashboardCard>
          <TabContext value={value}>
            <Box sx={{ p: 0 }}>
              <TabList
                onChange={handleChange}
                aria-label="Tabs Cyber Guard"
                variant="scrollable"
                scrollButtons="auto"
              >
                {COMMON_TAB.map((tab) => (
                  <Tab
                    key={tab.value}
                    icon={tab.icon}
                    label={<>{tab.label}</>}
                    value={tab.value}
                    disabled={tab.disabled}
                    sx={{ mb: 1 }}
                  />
                ))}
              </TabList>
            </Box>
            <Divider />
            <Box mt={2} sx={{ p: 0 }}>
              {COMMON_TAB.map((panel) => (
                <TabPanel key={panel.value} value={panel.value} sx={{ p: 0 }}>
                  {panel.content}
                </TabPanel>
              ))}
            </Box>
          </TabContext>
        </DashboardCard>
      </Grid>
      <CloseVulnerabilityModal
        open={isModalOpen}
        onClose={handleCloseModal}
        onConfirm={handleConfirmDelete}
      />

      {snackbarOpen && (
        <SnackBarInfo color={snackbarSeverity} title="Operation Status" message={snackbarMessage} />
      )}
    </Grid>
  );
};

export default ManagedVulnerability;
