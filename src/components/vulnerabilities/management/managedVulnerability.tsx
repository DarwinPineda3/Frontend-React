import AutoAwesomeIcon from '@mui/icons-material/AutoAwesome';
import BookmarkAddIcon from '@mui/icons-material/BookmarkAdd';
import DashboardIcon from '@mui/icons-material/Dashboard';
import EditIcon from '@mui/icons-material/Edit';
import TabContext from '@mui/lab/TabContext';
import TabList from '@mui/lab/TabList';
import TabPanel from '@mui/lab/TabPanel';
import { Badge, Box, Chip, Divider, Grid, IconButton, Tooltip } from '@mui/material';
import Tab from '@mui/material/Tab';
import React from 'react';
import { useTranslation } from 'react-i18next';
import Breadcrumb from 'src/components/shared/breadcrumb/Breadcrumb';
import DashboardCard from 'src/components/shared/DashboardCard';
import HumanizedDate from 'src/components/shared/HumanizedDate';
import { managementVulnerabilityType } from 'src/types/vulnerabilities/vulnerabilityManagementType';
import { formatDate } from 'src/utils/dateFormat';
import ManagedVulnerabilityDetail from './managedVulnerabilityDetail';
import { useNavigate } from 'react-router-dom';

interface Props {
  vulnerability: managementVulnerabilityType;
}

const ManagedVulnerability: React.FC<Props> = ({ vulnerability }) => {
  const { t, i18n } = useTranslation();
  const navigate = useNavigate();
  const { name: vulnName, status, closure_date, estimated_closure_date } = vulnerability;

  let statusLabel = '';
  let statusColor: 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' =
    'default';

  if (status === 'OPEN') {
    statusLabel = `${t('vulnerabilities.management.status')}: ${t(
      'vulnerabilities.management.open',
    )}`;
    statusColor = 'primary';
  } else if (status === 'CLOSED') {
    statusLabel = t('vulnerabilities.management.closed');
    statusColor = 'success';
  }

  const COMMON_TAB = [
    {
      value: 'overview',
      icon: <DashboardIcon />,
      label: `${t('vulnerabilities.management.overview')}`,
      disabled: false,
      content: <ManagedVulnerabilityDetail vulnerability={vulnerability} />,
    },
    {
      value: 'ai_solution',
      icon: <AutoAwesomeIcon />,
      label: `${t('vulnerabilities.management.ai_solution')}`,
      disabled: true,
      badge: <Badge>Soon</Badge>,
    },
  ];

  const [value, setValue] = React.useState('overview');

  const handleChange = (event: React.SyntheticEvent, newValue: string) => {
    setValue(newValue);
  };

  const handleManagedVulnFormClick = (id: number) => {
    navigate(`/vulnerabilities/management/form/${id}`);
  };
  
  return (
    <Grid container>
      <Grid item xs={12} xl={12}>
        <Breadcrumb title={vulnName} subtitle="">
          {/* Wrap all chips and buttons in a single Box */}
          <Box>
            <Box display="flex" flexWrap="wrap" gap={1} mb={3} mt={2}>
              {/* Existing Chips */}
              <Chip
                label={`${t('vulnerabilities.management.requires_attention')}`}
                color="info"
                variant="outlined"
              />

              {/* Status Chip */}
              <Chip label={statusLabel} color={statusColor} variant="outlined" />

              {/* Closure Date Chip with Tooltip (only if closure_date exists) */}
              {closure_date ? (
                <Tooltip title={<HumanizedDate dateString={closure_date} />}>
                  <Chip
                    label={`${t('vulnerabilities.management.closure_date')}: ${formatDate(
                      closure_date,
                      i18n.language,
                    )}`}
                    variant="outlined"
                  />
                </Tooltip>
              ) : estimated_closure_date ? (
                <Tooltip title={<HumanizedDate dateString={estimated_closure_date} />}>
                  <Chip
                    label={`${t('vulnerabilities.management.estimated_closure_date')}: ${formatDate(
                      estimated_closure_date,
                      i18n.language,
                    )}`}
                    variant="outlined"
                  />
                </Tooltip>
              ) : null}
            </Box>

            {/* Action Buttons in a single row */}
            <Box display="flex" gap={2} mt={2} alignItems="center">
              {/* Edit Button */}
              <Tooltip title={t('vulnerabilities.management.add_information')}>
                <IconButton color="primary" onClick={() => handleManagedVulnFormClick(vulnerability?.id)}>
                  <EditIcon />
                </IconButton>
              </Tooltip>

              {/* Bookmark Button */}
              <Tooltip title={t('vulnerabilities.management.close_vuln')}>
                <IconButton color="secondary" onClick={() => console.log('Bookmark clicked')}>
                  <BookmarkAddIcon />
                </IconButton>
              </Tooltip>
            </Box>
          </Box>
        </Breadcrumb>
      </Grid>
      {/* Alerts Table Section */}
      <Grid item xs={12} xl={12}>
        <DashboardCard>
          <TabContext value={value}>
            <Box sx={{ p: 0 }}>
              <TabList
                onChange={handleChange}
                aria-label="Tabs Cyber Guard"
                variant="scrollable"
                scrollButtons="auto"
              >
                {COMMON_TAB.map((tab) => (
                  <Tab
                    key={tab.value}
                    icon={tab.icon}
                    label={
                      <>
                        {tab.label}
                        {tab.badge && (
                          <Badge color="primary" variant="dot" sx={{ ml: 1 }}>
                            {tab.badge}
                          </Badge>
                        )}
                      </>
                    }
                    value={tab.value}
                    disabled={tab.disabled}
                    sx={{ mb: 1 }}
                  />
                ))}
              </TabList>
            </Box>
            <Divider />
            <Box mt={2} sx={{ p: 0 }}>
              {COMMON_TAB.map((panel) => (
                <TabPanel key={panel.value} value={panel.value} sx={{ p: 0 }}>
                  {panel.content}
                </TabPanel>
              ))}
            </Box>
          </TabContext>
        </DashboardCard>
      </Grid>
    </Grid>
  );
};

export default ManagedVulnerability;
