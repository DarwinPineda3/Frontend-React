import { Box, Button, MenuItem, Modal, Select, Typography } from '@mui/material';
import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';

interface CloseVulnerabilityModalProps {
  open: boolean;
  onClose: () => void;
  onConfirm: (closureData: {
    closure_reason: string;
    closure_date: string;
    status: string;
  }) => void;
}

const CloseVulnerabilityModal: React.FC<CloseVulnerabilityModalProps> = ({
  open,
  onClose,
  onConfirm,
}) => {
  const { t } = useTranslation();
  const [closureReason, setClosureReason] = useState('');
  const handleConfirm = () => {
    const closureDate = new Date().toISOString();
    onConfirm({
      closure_reason: closureReason,
      closure_date: closureDate,
      status: 'CLOSED',
    });
    onClose();
  };

  const menuItems = [
    { value: 'Resolved', label: `${t('vulnerabilities.management.resolved')}` },
    { value: 'Accept Risk', label: `${t('vulnerabilities.management.accept_risk')}` },
    { value: 'Transferred Risk', label: `${t('vulnerabilities.management.transferred_risk')}` },
    { value: 'Removed', label: `${t('vulnerabilities.management.removed')}` },
  ];

  return (
    <Modal open={open} onClose={onClose}>
      <Box
        sx={{
          position: 'absolute',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          width: 400,
          bgcolor: 'background.paper',
          boxShadow: 24,
          p: 4,
          borderRadius: 2,
        }}
      >
        <Typography variant="h6" component="h2" gutterBottom>
          {t('vulnerabilities.management.close_vuln')}
        </Typography>
        <Typography variant="body1" gutterBottom>
          {t('vulnerabilities.management.closure_reason_management')}
        </Typography>
        <Select
          fullWidth
          value={closureReason}
          onChange={(e) => setClosureReason(e.target.value)}
          displayEmpty
          sx={{ mt: 2, mb: 2 }}
        >
          <MenuItem value="" disabled>
            {t('vulnerabilities.management.select_option')}
          </MenuItem>
          {menuItems.map((item) => (
            <MenuItem key={item.value} value={item.value}>
              {item.label}
            </MenuItem>
          ))}
        </Select>
        <Box display="flex" justifyContent="flex-end" mt={2}>
          <Button
            variant="contained"
            color="primary"
            onClick={handleConfirm}
            disabled={!closureReason}
          >
            {t('vulnerabilities.management.confirm')}
          </Button>
          <Button variant="outlined" color="secondary" onClick={onClose} sx={{ ml: 2 }}>
            {t('vulnerabilities.cancel')}
          </Button>
        </Box>
      </Box>
    </Modal>
  );
};

export default CloseVulnerabilityModal;
