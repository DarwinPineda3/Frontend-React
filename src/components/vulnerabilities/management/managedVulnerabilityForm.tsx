import {
  Box,
  Button,
  FormControl,
  FormHelperText,
  Grid,
  InputLabel,
  MenuItem,
  Select,
  TextField,
} from '@mui/material';
import { useFormik } from 'formik';
import React from 'react';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import DashboardCard from 'src/components/shared/DashboardCard';
import { useDispatch } from 'src/store/Store';
import { editVulnerability } from 'src/store/vulnerabilities/ManagementVulnSlice';
import { managementVulnerabilityType } from 'src/types/vulnerabilities/vulnerabilityManagementType';
import * as Yup from 'yup';

interface Props {
  vulnerability: managementVulnerabilityType;
  onSubmit: (message: string, severity: 'success' | 'info' | 'warning' | 'error') => void;
}

const ManagedVulnerabilityForm: React.FC<Props> = ({ vulnerability, onSubmit }) => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { t } = useTranslation();

  // Formik setup with Yup validation schema
  const formik = useFormik({
    initialValues: {
      responsible: vulnerability?.responsible || '',
      role: vulnerability?.role || '',
      notes: vulnerability?.notes || '',
      work_plan: vulnerability?.work_plan || '',
      compensatory_controls: vulnerability?.compensatory_controls || '',
      recategorization: vulnerability?.recategorization || '',
      estimated_budget: vulnerability?.estimated_budget || 0,
      estimated_closure_date: vulnerability?.estimated_closure_date || '',
      evidence: vulnerability?.evidence || '',
    },
    validationSchema: Yup.object({
      responsible: Yup.string().required(`${t('vulnerabilities.management.required_field')}`),
      role: Yup.string().required(`${t('vulnerabilities.management.required_field')}`),
      notes: Yup.string().required(`${t('vulnerabilities.management.required_field')}`),
      work_plan: Yup.string().required(`${t('vulnerabilities.management.required_field')}`),
      compensatory_controls: Yup.string().required(
        `${t('vulnerabilities.management.required_field')}`,
      ),
      recategorization: Yup.string().required(`${t('vulnerabilities.management.required_field')}`),
      estimated_budget: Yup.number()
        .required(`${t('vulnerabilities.management.required_field')}`)
        .positive(),
      estimated_closure_date: Yup.string().required(
        `${t('vulnerabilities.management.required_field')}`,
      ),
      evidence: Yup.string().required(`${t('vulnerabilities.management.required_field')}`),
    }),
    onSubmit: (values) => {
      const newVulnerability: managementVulnerabilityType = {
        ...values,
        id: vulnerability?.id,
        vulnerability_id: vulnerability?.vulnerability_id,
        type: vulnerability?.type,
        severity: vulnerability?.severity,
        name: vulnerability?.name,
        creation_time: vulnerability?.creation_time,
        qod: vulnerability?.qod,
        hosts: vulnerability?.hosts,
        port: vulnerability?.port,
        tool: vulnerability?.tool,
        description: vulnerability?.description,
        report_id: vulnerability?.report_id,
        report_date: vulnerability?.report_date,
        last_revision_date: vulnerability?.last_revision_date,
        closure_date: vulnerability?.closure_date,
        closure_reason: vulnerability?.closure_reason,
        status: vulnerability?.status,
      };

      if (vulnerability) {
        dispatch(editVulnerability(newVulnerability));
        onSubmit(
          `${t('vulnerabilities.management.managed_vulnerability_updated_successfully')}`,
          'success',
        );
        navigate(`/vulnerabilities/management/detail/${vulnerability?.id}`);
      } else {
        onSubmit(`${t('vulnerabilities.management.managed_vulnerability_updated_error')}`, 'error');
      }
    },
  });

  const recategorizationOptions = [
    { value: 'CRITICAL', label: `${t('vulnerabilities.management.critical')}` },
    { value: 'HIGH', label: `${t('vulnerabilities.management.high')}` },
    { value: 'MEDIUM', label: `${t('vulnerabilities.management.medium')}` },
    { value: 'LOW', label: `${t('vulnerabilities.management.low')}` },
  ];

  return (
    <DashboardCard
      title={t('vulnerabilities.management.vulnerability_management_form')!}
      subtitle={t('vulnerabilities.management.vulnerability_management_form_subtitle')!}
    >
      <Box component="form" onSubmit={formik.handleSubmit} noValidate>
        <Grid container spacing={2}>
          {/* Responsible */}
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label={t('vulnerabilities.management.responsible')}
              name="responsible"
              value={formik.values.responsible}
              onChange={formik.handleChange}
              error={formik.touched.responsible && Boolean(formik.errors.responsible)}
              helperText={formik.touched.responsible && formik.errors.responsible}
              margin="normal"
            />
          </Grid>

          {/* Role */}
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label={t('vulnerabilities.management.role')}
              name="role"
              value={formik.values.role}
              onChange={formik.handleChange}
              error={formik.touched.role && Boolean(formik.errors.role)}
              helperText={formik.touched.role && formik.errors.role}
              margin="normal"
            />
          </Grid>

          {/* Notes */}
          <Grid item xs={12}>
            <TextField
              fullWidth
              label={t('vulnerabilities.management.notes')}
              name="notes"
              value={formik.values.notes}
              onChange={formik.handleChange}
              error={formik.touched.notes && Boolean(formik.errors.notes)}
              helperText={formik.touched.notes && formik.errors.notes}
              margin="normal"
              multiline
              rows={4}
            />
          </Grid>

          {/* Work Plan */}
          <Grid item xs={12}>
            <TextField
              fullWidth
              label={t('vulnerabilities.management.work_plan')}
              name="work_plan"
              value={formik.values.work_plan}
              onChange={formik.handleChange}
              error={formik.touched.work_plan && Boolean(formik.errors.work_plan)}
              helperText={formik.touched.work_plan && formik.errors.work_plan}
              margin="normal"
              multiline
              rows={4}
            />
          </Grid>

          {/* Compensatory Controls */}
          <Grid item xs={12}>
            <TextField
              fullWidth
              label={t('vulnerabilities.management.compensatory_controls')}
              name="compensatory_controls"
              value={formik.values.compensatory_controls}
              onChange={formik.handleChange}
              error={
                formik.touched.compensatory_controls && Boolean(formik.errors.compensatory_controls)
              }
              helperText={
                formik.touched.compensatory_controls && formik.errors.compensatory_controls
              }
              margin="normal"
              multiline
              rows={4}
            />
          </Grid>

          {/* Recategorization */}
          <Grid item xs={12} sm={6}>
            <FormControl
              fullWidth
              margin="normal"
              error={formik.touched.recategorization && Boolean(formik.errors.recategorization)}
            >
              <InputLabel>{t('vulnerabilities.management.recategorization')}</InputLabel>
              <Select
                label={t('vulnerabilities.management.recategorization')}
                name="recategorization"
                value={formik.values.recategorization}
                onChange={formik.handleChange}
              >
                {recategorizationOptions.map((option) => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </Select>
              <FormHelperText>
                {formik.touched.recategorization && formik.errors.recategorization}
              </FormHelperText>
            </FormControl>
          </Grid>

          {/* Estimated Budget */}
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label={t('vulnerabilities.management.estimated_budget')}
              name="estimated_budget"
              type="number"
              value={formik.values.estimated_budget}
              onChange={formik.handleChange}
              error={formik.touched.estimated_budget && Boolean(formik.errors.estimated_budget)}
              helperText={formik.touched.estimated_budget && formik.errors.estimated_budget}
              margin="normal"
            />
          </Grid>

          {/* Estimated Closure Date */}
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label={t('vulnerabilities.management.estimated_closure_date')}
              name="estimated_closure_date"
              type="date"
              value={formik.values.estimated_closure_date}
              onChange={formik.handleChange}
              error={
                formik.touched.estimated_closure_date &&
                Boolean(formik.errors.estimated_closure_date)
              }
              helperText={
                formik.touched.estimated_closure_date && formik.errors.estimated_closure_date
              }
              margin="normal"
              InputLabelProps={{
                shrink: true,
              }}
            />
          </Grid>

          {/* Evidence */}
          <Grid item xs={12}>
            <TextField
              fullWidth
              label={t('vulnerabilities.management.evidence')}
              name="evidence"
              value={formik.values.evidence}
              onChange={formik.handleChange}
              error={formik.touched.evidence && Boolean(formik.errors.evidence)}
              helperText={formik.touched.evidence && formik.errors.evidence}
              margin="normal"
              multiline
              rows={4}
            />
          </Grid>
        </Grid>

        <Box display="flex" justifyContent="flex-end" mt={2}>
          <Button type="submit" variant="contained" color="primary">
            {t('vulnerabilities.management.submit')}
          </Button>
        </Box>
      </Box>
    </DashboardCard>
  );
};

export default ManagedVulnerabilityForm;
