import BookmarkAddIcon from '@mui/icons-material/BookmarkAdd';
import DownloadIcon from '@mui/icons-material/Download';
import EditIcon from '@mui/icons-material/Edit';
import { Box, Button, Chip, Grid, Tooltip, Typography } from '@mui/material';
import { useTheme } from '@mui/material/styles';
import _ from 'lodash';
import React, { useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';
import DashboardCard from 'src/components/shared/DashboardCard';
import SnackBarInfo from 'src/layouts/full/shared/SnackBar/SnackBarInfo';
import { useDispatch } from 'src/store/Store';
import { downloadEvidence } from 'src/store/vulnerabilities/ManagementVulnSlice';
import { managementVulnerabilityType } from 'src/types/vulnerabilities/vulnerabilityManagementType';
import { formatDate } from 'src/utils/dateFormat';
import { formatCurrency } from 'src/utils/formatters';
import { getChipColor, getSeverityColor } from 'src/utils/severityUtils';

interface Props {
  vulnerability?: managementVulnerabilityType;
  handleManagedVulnFormClick: (id: number | string) => void;
  handleVulnModalClick: (vulnerability: managementVulnerabilityType) => void;
}

const ManagedVulnerabilityDetail: React.FC<Props> = ({
  vulnerability,
  handleManagedVulnFormClick,
  handleVulnModalClick,
}) => {
  const { t, i18n } = useTranslation();
  const theme = useTheme();
  const dispatch = useDispatch();
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] = useState<
    'success' | 'info' | 'warning' | 'error'
  >('success');
  const handleDownload = (id: number | string) => {
    dispatch(downloadEvidence(id)).catch((error) => {
      console.error('Error downloading evidence:', error);
      handleFormSubmit(`${t('vulnerabilities.scan_failed')}`, 'error');
    });
  };

  useEffect(() => {
    if (snackbarMessage && snackbarSeverity) {
      setSnackbarOpen(true);
    }
  }, [snackbarMessage, snackbarSeverity]);

  const handleFormSubmit = (
    message: string,
    severity: 'success' | 'info' | 'warning' | 'error',
  ) => {
    setSnackbarMessage(message);
    setSnackbarSeverity(severity);
    setSnackbarOpen(false);
  };

  const renderField = (label: string, value: string | undefined | null) => {
    return (
      <Box>
        <Typography variant="subtitle2" fontWeight={600}>
          {label}:
        </Typography>
        <Typography variant="body2">
          {value ? value : t('vulnerabilities.not_available')}
        </Typography>
      </Box>
    );
  };

  return (
    <Grid container spacing={3} sx={{ height: '100%' }}>
      <Grid item xs={12} xl={6} sx={{ display: 'flex', flexDirection: 'column', height: '100%' }}>
        <DashboardCard title={t('vulnerabilities.management.vuln_detail')!}>
          <Box display="flex" flexDirection="column" gap={2} mt={3} flex={1}>
            <Box>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('vulnerabilities.hosts')}:
              </Typography>
              <Typography variant="body2">{vulnerability?.hosts}</Typography>
            </Box>
            <Box display="flex" alignItems={'center'} gap={1}>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('vulnerabilities.type')}:
              </Typography>
              <Chip
                label={getChipColor(_.lowerCase(vulnerability?.type), theme, t).label}
                sx={{
                  backgroundColor: getChipColor(_.lowerCase(vulnerability?.type), theme, t).color,
                  color: 'white',
                }}
                variant="filled"
              />
            </Box>

            <Box display="flex" alignItems={'center'} gap={1}>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('vulnerabilities.severity')}:
              </Typography>
              <Chip
                label={vulnerability?.severity!}
                sx={{
                  backgroundColor: getSeverityColor(vulnerability?.severity!, theme).color,
                  color: 'white',
                }}
                variant="filled"
              />
            </Box>

            <Box>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('vulnerabilities.creation_time')}:
              </Typography>
              <Typography variant="body2">
                {formatDate(vulnerability?.creation_time!, i18n.language)}
              </Typography>
            </Box>

            <Box>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('vulnerabilities.qod')}:
              </Typography>
              <Typography variant="body2">{vulnerability?.qod}</Typography>
            </Box>

            <Box>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('vulnerabilities.port')}:
              </Typography>
              <Typography variant="body2">{vulnerability?.port}</Typography>
            </Box>

            <Box>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('vulnerabilities.tool')}:
              </Typography>
              <Typography variant="body2">{vulnerability?.tool}</Typography>
            </Box>

            <Box>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('vulnerabilities.description')}:
              </Typography>
              <Typography variant="body2">
                {vulnerability?.description || t('vulnerabilities.not_available')}
              </Typography>
            </Box>

            <Box>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('vulnerabilities.report_id')}:
              </Typography>
              <Typography variant="body2">{vulnerability?.report_id}</Typography>
            </Box>

            <Box>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('vulnerabilities.report_date')}:
              </Typography>
              <Typography variant="body2">
                {formatDate(vulnerability?.report_date!, i18n.language)}
              </Typography>
            </Box>
          </Box>
        </DashboardCard>
      </Grid>
      {/* Other Details */}
      <Grid item xs={12} xl={6} sx={{ display: 'flex', flexDirection: 'column', height: '100%' }}>
        <DashboardCard title={t('vulnerabilities.management.management_details')!}>
          <Box display="flex" flexDirection="column" gap={2} mt={3} flex={1}>
            {renderField(t('vulnerabilities.management.responsible'), vulnerability?.responsible)}
            {renderField(t('vulnerabilities.management.role'), vulnerability?.role)}
            {renderField(t('vulnerabilities.management.notes'), vulnerability?.notes)}
            {renderField(t('vulnerabilities.management.work_plan'), vulnerability?.work_plan)}
            {renderField(
              t('vulnerabilities.management.compensatory_controls'),
              vulnerability?.compensatory_controls,
            )}

            <Box>
              <Typography variant="subtitle2">
                {t('vulnerabilities.management.recategorization')}
              </Typography>
              {vulnerability?.recategorization! ? (
                <Chip
                  label={getChipColor(_.lowerCase(vulnerability.recategorization!), theme, t).label}
                  sx={{
                    backgroundColor: getChipColor(
                      _.lowerCase(vulnerability.recategorization!),
                      theme,
                      t,
                    ).color,
                    color: 'white',
                  }}
                  variant="filled"
                />
              ) : (
                <Typography variant="body2">{t('vulnerabilities.not_available')}</Typography>
              )}
            </Box>
            {renderField(
              t('vulnerabilities.management.estimated_budget'),
              formatCurrency(vulnerability?.estimated_budget!),
            )}
            {vulnerability?.last_revision_date && (
              <Box>
                <Typography variant="subtitle2" fontWeight={600}>
                  {t('vulnerabilities.management.last_revision_date')}:
                </Typography>
                <Typography variant="body2">
                  {formatDate(vulnerability?.last_revision_date!, i18n.language)}
                </Typography>
              </Box>
            )}
            <Box>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('vulnerabilities.management.estimated_closure_date')}:
              </Typography>
              <Typography variant="body2">
                {vulnerability?.estimated_closure_date!
                  ? formatDate(vulnerability?.estimated_closure_date!, i18n.language)
                  : t('vulnerabilities.not_available')}
              </Typography>
            </Box>
            <Box>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('vulnerabilities.management.closure_date')}:
              </Typography>
              <Typography variant="body2">
                {vulnerability?.closure_date!
                  ? formatDate(vulnerability?.closure_date!, i18n.language)
                  : t('vulnerabilities.not_available')}
              </Typography>
            </Box>
            {renderField(
              t('vulnerabilities.management.closure_reason'),
              vulnerability?.closure_reason,
            )}
            <Box>
              <Button
                variant="contained"
                color="primary"
                startIcon={<DownloadIcon />}
                onClick={() => handleDownload(vulnerability?.id!)}
                disabled={!vulnerability?.evidence}
                sx={{ mr: 2 }}
              >
                {t('vulnerabilities.management.download_evidences')}
              </Button>
              {/* Edit Button */}
              <Tooltip title={t('vulnerabilities.management.add_information')}>
                <Button
                  variant="contained"
                  color="primary"
                  startIcon={<EditIcon />}
                  onClick={() => handleManagedVulnFormClick(vulnerability?.id!)}
                  disabled={vulnerability?.status === 'CLOSED'}
                  sx={{ mr: 2 }}
                >
                  {t('vulnerabilities.management.add_information_vuln')}
                </Button>
              </Tooltip>

              {/* Bookmark Button */}
              <Tooltip title={t('vulnerabilities.management.close_vuln')}>
                <Button
                  variant="contained"
                  color="secondary"
                  startIcon={<BookmarkAddIcon />}
                  onClick={() => handleVulnModalClick(vulnerability!)}
                  disabled={vulnerability?.status === 'CLOSED'}
                >
                  {t('vulnerabilities.management.close_vuln')}
                </Button>
              </Tooltip>
            </Box>
            {snackbarOpen && (
              <SnackBarInfo
                color={snackbarSeverity}
                title="Operation Status"
                message={snackbarMessage}
              />
            )}
          </Box>
        </DashboardCard>
      </Grid>
    </Grid>
  );
};

export default ManagedVulnerabilityDetail;
