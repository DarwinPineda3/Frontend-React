import { Box, Button, Chip, Grid, Typography } from '@mui/material';
import { useTheme } from '@mui/material/styles';
import _ from 'lodash';
import React from 'react';
import { useTranslation } from 'react-i18next';
import DashboardCard from 'src/components/shared/DashboardCard';
import {
  EvidenceFile,
  managementVulnerabilityType,
} from 'src/types/vulnerabilities/vulnerabilityManagementType';
import { formatDate } from 'src/utils/dateFormat';
import { formatCurrency } from 'src/utils/formatters';

interface Props {
  vulnerability?: managementVulnerabilityType;
}

const ManagedVulnerabilityDetail: React.FC<Props> = ({ vulnerability }) => {
  const { t, i18n } = useTranslation();
  const theme = useTheme();
  const criticalColor = theme.palette.level.critical;
  const highColor = theme.palette.level.high;
  const mediumColor = theme.palette.level.medium;
  const lowColor = theme.palette.level.low;
  const noneColor = theme.palette.level.none;

  // Helper to get color and label based on severity level
  const getChipColorSeverity = (severity: number) => {
    if (severity > 9.0) {
      return { color: criticalColor };
    } else if (severity > 7.0) {
      return { color: highColor };
    } else if (severity > 4.0) {
      return { color: mediumColor };
    } else if (severity > 0) {
      return { color: lowColor };
    } else {
      return { color: noneColor };
    }
  };

  const getChipColor = (riskLevel: string) => {
    switch (riskLevel) {
      case 'critical':
        return { color: criticalColor, label: t('monitoring.critical') };
      case 'high':
        return { color: highColor, label: t('monitoring.high') };
      case 'medium':
        return { color: mediumColor, label: t('monitoring.medium') };
      case 'low':
        return { color: lowColor, label: t('monitoring.low') };
      default:
        return { color: noneColor, label: 'N/A' };
    }
  };

  const handleDownload = (evidenceUrl: EvidenceFile[]) => {
    // const link = document.createElement('a');
    // link.href = evidenceUrl;
    // link.download = evidenceUrl.split('/').pop() || 'evidence';
    // link.click();
  };

  const renderField = (label: string, value: string | undefined | null) => {
    return (
      <Box>
        <Typography variant="subtitle2" fontWeight={600}>
          {label}:
        </Typography>
        <Typography variant="body2">
          {value ? value : t('vulnerabilities.not_available')}
        </Typography>
      </Box>
    );
  };

  return (
    <Grid container spacing={3} sx={{ height: '100%' }}>
      <Grid item xs={12} xl={6} sx={{ display: 'flex', flexDirection: 'column', height: '100%' }}>
        <DashboardCard title={t('vulnerabilities.management.vuln_detail')!}>
          <Box display="flex" flexDirection="column" gap={2} mt={3} flex={1}>
            <Box>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('vulnerabilities.hosts')}:
              </Typography>
              <Typography variant="body2">{vulnerability?.hosts}</Typography>
            </Box>
            <Box display="flex" alignItems={'center'} gap={1}>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('vulnerabilities.type')}:
              </Typography>
              <Chip
                label={getChipColor(_.lowerCase(vulnerability?.type)).label}
                sx={{
                  borderColor: getChipColor(_.lowerCase(vulnerability?.type)).color,
                  color: getChipColor(_.lowerCase(vulnerability?.type)).color,
                }}
                variant="outlined"
              />
            </Box>

            <Box display="flex" alignItems={'center'} gap={1}>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('vulnerabilities.severity')}:
              </Typography>
              <Chip
                label={vulnerability?.severity!}
                sx={{
                  borderColor: getChipColorSeverity(vulnerability?.severity!).color,
                  color: getChipColorSeverity(vulnerability?.severity!).color,
                }}
                variant="outlined"
              />
            </Box>

            <Box>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('vulnerabilities.creation_time')}:
              </Typography>
              <Typography variant="body2">
                {formatDate(vulnerability?.creation_time!, i18n.language)}
              </Typography>
            </Box>

            <Box>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('vulnerabilities.qod')}:
              </Typography>
              <Typography variant="body2">{vulnerability?.qod}</Typography>
            </Box>

            <Box>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('vulnerabilities.port')}:
              </Typography>
              <Typography variant="body2">{vulnerability?.port}</Typography>
            </Box>

            <Box>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('vulnerabilities.tool')}:
              </Typography>
              <Typography variant="body2">{vulnerability?.tool}</Typography>
            </Box>

            <Box>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('vulnerabilities.description')}:
              </Typography>
              <Typography variant="body2">
                {vulnerability?.description || t('vulnerabilities.not_available')}
              </Typography>
            </Box>

            <Box>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('vulnerabilities.report_id')}:
              </Typography>
              <Typography variant="body2">{vulnerability?.report_id}</Typography>
            </Box>

            <Box>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('vulnerabilities.report_date')}:
              </Typography>
              <Typography variant="body2">
                {formatDate(vulnerability?.report_date!, i18n.language)}
              </Typography>
            </Box>
          </Box>
        </DashboardCard>
      </Grid>
      {/* Other Details */}
      <Grid item xs={12} xl={6} sx={{ display: 'flex', flexDirection: 'column', height: '100%' }}>
        <DashboardCard title={t('vulnerabilities.management.management_details')!}>
          <Box display="flex" flexDirection="column" gap={2} mt={3} flex={1}>
            {renderField(t('vulnerabilities.management.responsible'), vulnerability?.responsible)}
            {renderField(t('vulnerabilities.management.role'), vulnerability?.role)}
            {renderField(t('vulnerabilities.management.notes'), vulnerability?.notes)}
            {renderField(t('vulnerabilities.management.work_plan'), vulnerability?.work_plan)}
            {renderField(
              t('vulnerabilities.management.compensatory_controls'),
              vulnerability?.compensatory_controls,
            )}
            {renderField(
              t('vulnerabilities.management.recategorization'),
              vulnerability?.recategorization,
            )}
            {renderField(
              t('vulnerabilities.management.estimated_budget'),
              formatCurrency(vulnerability?.estimated_budget!),
            )}
            {vulnerability?.last_revision_date && (
              <Box>
                <Typography variant="subtitle2" fontWeight={600}>
                  {t('vulnerabilities.management.last_revision_date')}:
                </Typography>
                <Typography variant="body2">
                  {formatDate(vulnerability?.last_revision_date!, i18n.language)}
                </Typography>
              </Box>
            )}
            <Box>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('vulnerabilities.management.estimated_closure_date')}:
              </Typography>
              <Typography variant="body2">
                {vulnerability?.estimated_closure_date!
                  ? formatDate(vulnerability?.estimated_closure_date!, i18n.language)
                  : t('vulnerabilities.not_available')}
              </Typography>
            </Box>
            <Box>
              <Typography variant="subtitle2" fontWeight={600}>
                {t('vulnerabilities.management.closure_date')}:
              </Typography>
              <Typography variant="body2">
                {vulnerability?.closure_date!
                  ? formatDate(vulnerability?.closure_date!, i18n.language)
                  : t('vulnerabilities.not_available')}
              </Typography>
            </Box>
            {renderField(
              t('vulnerabilities.management.closure_reason'),
              vulnerability?.closure_reason,
            )}
            <Box>
              <Button
                variant="contained"
                color="primary"
                onClick={() => handleDownload(vulnerability?.evidence!)}
              >
                {t('vulnerabilities.management.download_evidences')}
              </Button>
            </Box>
          </Box>
        </DashboardCard>
      </Grid>
    </Grid>
  );
};

export default ManagedVulnerabilityDetail;
