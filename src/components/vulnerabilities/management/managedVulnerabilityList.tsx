import DownloadIcon from '@mui/icons-material/Download';
import {
  Box,
  Button,
  Chip,
  IconButton,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TablePagination,
  TableRow,
  TextField,
  Typography,
  useMediaQuery,
} from '@mui/material';
import { useTheme } from '@mui/material/styles';
import { IconEye } from '@tabler/icons-react';
import _ from 'lodash';
import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import DashboardCard from 'src/components/shared/DashboardCard';
import HumanizedDate from 'src/components/shared/HumanizedDate';
import Loader from 'src/components/shared/Loader/Loader';
import SnackBarInfo from 'src/layouts/full/shared/SnackBar/SnackBarInfo';
import { useDispatch, useSelector } from 'src/store/Store';
import {
  downloadVulnerabilitiesReport,
  fetchVulnerabilitiesByDateRange,
  setPage,
  setPageSize,
} from 'src/store/vulnerabilities/ManagementVulnSlice';
import { getChipColor, getSeverityColor } from 'src/utils/severityUtils';

const ManagedVulnerabilitiesList = () => {
  const navigate = useNavigate();
  const { t } = useTranslation();
  const dispatch = useDispatch();
  const managedVuln = useSelector((state: any) => state.managementVulnReducer.managedVuln);
  const currentPage = useSelector((state: any) => state.managementVulnReducer.page);
  const pageSize = useSelector((state: any) => state.managementVulnReducer.pageSize);
  const totalPages = useSelector((state: any) => state.managementVulnReducer.totalPages);
  const [snackbarOpen, setSnackbarOpen] = useState(false); // State to control the snackbar
  const [snackbarMessage, setSnackbarMessage] = useState(''); // Message for the snackbar
  const [snackbarSeverity, setSnackbarSeverity] = useState<
    'success' | 'info' | 'warning' | 'error'
  >('success'); // Snackbar severity
  const [isLoading, setIsLoading] = useState(false);
  const theme = useTheme();
  const isSmallScreen = useMediaQuery(theme.breakpoints.down('sm'));

  const [startDate, setStartDate] = useState(() => {
    const now = new Date();
    now.setDate(1);
    return now.toISOString().split('T')[0];
  });

  const [endDate, setEndDate] = useState(() => {
    const now = new Date();
    now.setMonth(now.getMonth() + 1, 1);
    return now.toISOString().split('T')[0];
  });

  const startISO = startDate ? new Date(`${startDate}T00:00:00.000Z`).toISOString() : '';
  const endISO = endDate ? new Date(`${endDate}T00:00:00.000Z`).toISOString() : '';

  React.useEffect(() => {
    const newEndDate = new Date(startDate);
    newEndDate.setMonth(newEndDate.getMonth() + 1);
    const newEndDateString = newEndDate.toISOString().split('T')[0];

    if (newEndDateString >= startDate) {
      setEndDate(newEndDateString);
    }
  }, [startDate]);

  React.useEffect(() => {
    if (snackbarMessage && snackbarSeverity) {
      setSnackbarOpen(true);
    }
    const fetchData = async () => {
      setIsLoading(true);
      await dispatch(fetchVulnerabilitiesByDateRange(startISO, endISO, currentPage, pageSize));
      setIsLoading(false);
    };
    fetchData();
  }, [dispatch, currentPage, pageSize, snackbarMessage, snackbarSeverity]);

  const handlePageChange = (
    event: React.MouseEvent<HTMLButtonElement, MouseEvent> | null,
    page: number,
  ) => {
    const newPage = page + 1;
    if (newPage !== currentPage) {
      dispatch(setPage(newPage));
    }
  };

  const handlePageSizeChange = (event: React.ChangeEvent<{ value: unknown }>) => {
    const newPageSize = event.target.value as number;
    dispatch(setPageSize(newPageSize));
    dispatch(setPage(1));
  };

  const handleDownloadExcel = () => {
    dispatch(downloadVulnerabilitiesReport(startISO, endISO)).catch((error) => {
      //console.log('Error downloading vulnerabilities report:', error);
      handleFormSubmit(`${t('vulnerabilities.scan_failed')}`, 'error');
    });
  };

  const handleManagedVulnDetailClick = (id: string) => {
    navigate(`/vulnerabilities/management/detail/${id}`);
  };

  const handleFormSubmit = (
    message: string,
    severity: 'success' | 'info' | 'warning' | 'error',
  ) => {
    setSnackbarMessage(message);
    setSnackbarSeverity(severity);
    setSnackbarOpen(false);
  };

  const handleFetchByDateRange = async () => {
    if (!startDate || !endDate) {
      return handleFormSubmit(
        `${t('vulnerabilities.management.date_range_selection_error')}`,
        'error',
      );
    }

    if (new Date(endDate) < new Date(startDate)) {
      return handleFormSubmit(
        `${t('vulnerabilities.management.date_error_end_before_start')}`,
        'error',
      );
    }

    setIsLoading(true);
    try {
      await dispatch(fetchVulnerabilitiesByDateRange(startISO, endISO, currentPage, pageSize));
    } catch (error) {
      console.error(error);
      handleFormSubmit(`${t('vulnerabilities.scan_failed')}`, 'error');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <DashboardCard
      title={t('vulnerabilities.management.vulnerabilities_management')!}
      subtitle={t('vulnerabilities.management.vulnerabilities_management_list')!}
      action={
        <Box display="flex" flexDirection={isSmallScreen ? 'column' : 'row'} gap={2}>
          <Button
            variant="contained"
            startIcon={<DownloadIcon />}
            disabled={
              managedVuln.length === 0 ||
              !startDate ||
              !endDate ||
              new Date(endDate) < new Date(startDate)
            }
            onClick={handleDownloadExcel}
          >
            {t('vulnerabilities.download_report')!}
          </Button>
          <TextField
            label={t('vulnerabilities.start_date')!}
            type="date"
            InputLabelProps={{ shrink: true }}
            value={startDate}
            onChange={(e) => setStartDate(e.target.value)}
            sx={{ minWidth: '150px' }}
          />
          <TextField
            label={t('vulnerabilities.end_date')!}
            type="date"
            InputLabelProps={{ shrink: true }}
            value={endDate}
            onChange={(e) => setEndDate(e.target.value)}
            sx={{ minWidth: '150px' }}
          />
          <Button
            variant="contained"
            disabled={!startDate || !endDate || new Date(endDate) < new Date(startDate)}
            onClick={handleFetchByDateRange}
          >
            {t('vulnerabilities.management.search')!}
          </Button>
        </Box>
      }
    >
      <Box>
        {isLoading ? (
          <Box display="flex" justifyContent="center" alignItems="center" height="300px">
            <Loader />
          </Box>
        ) : (
          <>
            <TableContainer>
              <Table aria-label="technology table" sx={{ whiteSpace: 'nowrap' }}>
                <TableHead>
                  <TableRow>
                    {[
                      t('vulnerabilities.management.type'),
                      t('vulnerabilities.management.hosts'),
                      t('vulnerabilities.management.severity'),
                      t('vulnerabilities.management.name'),
                      t('vulnerabilities.management.date'),
                      t('vulnerabilities.management.tool'),
                      t('vulnerabilities.management.status'),
                      t('vulnerabilities.management.details'),
                    ].map((header, index) => (
                      <TableCell
                        key={index}
                        sx={{
                          display: { xs: index > 3 ? 'none' : 'table-cell', md: 'table-cell' },
                        }}
                      >
                        <Typography variant="subtitle2" fontWeight={600}>
                          {header}
                        </Typography>
                      </TableCell>
                    ))}
                  </TableRow>
                </TableHead>
                <TableBody>
                  {managedVuln.length > 0 ? (
                    managedVuln.map((vulnerability: any, index: number) => (
                      <TableRow key={index}>
                        <TableCell>
                          <Typography variant="subtitle2" fontWeight={600}>
                            <Chip
                              label={getChipColor(_.lowerCase(vulnerability.type), theme, t).label}
                              sx={{
                                backgroundColor: getChipColor(
                                  _.lowerCase(vulnerability.type),
                                  theme,
                                  t,
                                ).color,
                                color: 'white',
                              }}
                            />
                          </Typography>
                        </TableCell>
                        <TableCell>
                          <Typography variant="subtitle2" fontWeight={600}>
                            {vulnerability.hosts}
                          </Typography>
                        </TableCell>
                        <TableCell>
                          <Typography variant="subtitle2" fontWeight={600}>
                            <Chip
                              label={vulnerability.severity}
                              sx={{
                                backgroundColor: getSeverityColor(vulnerability.severity, theme)
                                  .color,
                                color: 'white',
                              }}
                            />
                          </Typography>
                        </TableCell>
                        <TableCell>
                          <Typography variant="subtitle2" fontWeight={600}>
                            {vulnerability.name}
                          </Typography>
                        </TableCell>
                        <TableCell sx={{ display: { xs: 'none', md: 'table-cell' } }}>
                          <Typography variant="subtitle2" fontWeight={600}>
                            <HumanizedDate dateString={vulnerability.creation_time} />
                          </Typography>
                        </TableCell>
                        <TableCell sx={{ display: { xs: 'none', md: 'table-cell' } }}>
                          <Typography color="textSecondary" variant="subtitle2" fontWeight={400}>
                            {vulnerability.tool}
                          </Typography>
                        </TableCell>
                        <TableCell sx={{ display: { xs: 'none', md: 'table-cell' } }}>
                          <Typography variant="subtitle2" fontWeight={600}>
                            <Chip
                              label={
                                vulnerability.status === 'OPEN'
                                  ? t('vulnerabilities.management.open')
                                  : t('vulnerabilities.management.closed')
                              }
                              sx={{
                                backgroundColor:
                                  vulnerability.status === 'OPEN'
                                    ? theme.palette.success.main
                                    : theme.palette.error.main,
                                color: 'white',
                              }}
                            />
                          </Typography>
                        </TableCell>
                        <TableCell sx={{ display: { xs: 'none', md: 'table-cell' } }}>
                          <IconButton
                            size="small"
                            color="primary"
                            onClick={() => handleManagedVulnDetailClick(vulnerability.id)}
                          >
                            <IconEye />
                          </IconButton>
                        </TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell colSpan={8} style={{ textAlign: 'center' }}>
                        <Typography color="textSecondary" variant="subtitle2">
                          {t('vulnerabilities.no_data_available')}
                        </Typography>
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </TableContainer>
            <TablePagination
              rowsPerPageOptions={[5, 10, 25, 50, 100]}
              component="div"
              count={totalPages * pageSize}
              rowsPerPage={pageSize}
              page={currentPage - 1}
              onPageChange={handlePageChange}
              onRowsPerPageChange={handlePageSizeChange}
            />
            {snackbarOpen && (
              <SnackBarInfo
                color={snackbarSeverity}
                title="Operation Status"
                message={snackbarMessage}
              />
            )}
          </>
        )}
      </Box>
    </DashboardCard>
  );
};

export default ManagedVulnerabilitiesList;
