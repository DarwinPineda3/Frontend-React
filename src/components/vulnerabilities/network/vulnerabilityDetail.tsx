import ManageAccountsIcon from '@mui/icons-material/ManageAccounts';
import TranslateIcon from '@mui/icons-material/Translate';
import {
  Box,
  Button,
  Grid,
  Table,
  TableBody,
  TableCell,
  TableRow,
  Typography,
  useTheme,
} from '@mui/material';
import { useEffect, useMemo, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { useParams } from 'react-router-dom';
import DashboardCard from 'src/components/shared/DashboardCard';
import Loader from 'src/components/shared/Loader/Loader';
import SnackBarInfo from 'src/layouts/full/shared/SnackBar/SnackBarInfo';
import { useDispatch, useSelector } from 'src/store/Store';
import { createVulnerabilities } from 'src/store/vulnerabilities/ManagementVulnSlice';
import { fetchNetworkScanReportDetail } from 'src/store/vulnerabilities/network/NetworkScansSlice';
import { NetworkScanReportDetail } from 'src/types/vulnerabilities/network/networkScansType';
import { managementVulnerabilityType } from 'src/types/vulnerabilities/vulnerabilityManagementType';
import { getSeverityColor } from 'src/utils/severityUtils';

interface VulnerabilityDetailProps {
  reportID: string;
  scanID: string;
}

const VulnerabilityDetailView: React.FC<VulnerabilityDetailProps> = ({ reportID, scanID }) => {
  const [isLoading, setIsLoading] = useState(false);
  const { vulnerabilityId } = useParams<{ vulnerabilityId: string }>();
  const { t } = useTranslation();
  const dispatch = useDispatch();
  const theme = useTheme();
  const networkScanReportDetail: NetworkScanReportDetail = useSelector(
    (state: any) => state.networkScanReducer.networkScanReportDetail,
  );
  const [snackbarOpen, setSnackbarOpen] = useState(false); // State to control the snackbar
  const [snackbarMessage, setSnackbarMessage] = useState(''); // Message for the snackbar
  const [snackbarSeverity, setSnackbarSeverity] = useState<
    'success' | 'info' | 'warning' | 'error'
  >('success'); // Snackbar severity

  const vulnerabilityData = useMemo(() => {
    if (networkScanReportDetail?.report?.report.results && vulnerabilityId) {
      return networkScanReportDetail.report.report.results.find(
        (vuln: any) => vuln.result.id === vulnerabilityId,
      );
    }
    return null;
  }, [networkScanReportDetail, vulnerabilityId]);

  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      try {
        await dispatch(fetchNetworkScanReportDetail(scanID, reportID));
      } catch (error) {
        console.error('error', error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchData();
  }, [dispatch, scanID, reportID]);

  if (isLoading || !vulnerabilityData) {
    return (
      <Box display="flex" justifyContent="center" alignItems={'center'} mt={4} mb={4}>
        <Loader />
      </Box>
    );
  }

  const { severity, name, threat, nvt, host, qod, description, id } = vulnerabilityData.result;
  const severityColor = getSeverityColor(severity, theme);
  const product = host.details.find((obj) => obj['name'] == 'App');

  const handleManagementClick = async () => {
    setSnackbarOpen(false);

    try {
      const vulnerability: managementVulnerabilityType = {
        id: id,
        name: name,
        report_id: networkScanReportDetail.id_elastic,
        tool: 'Network',
        severity: vulnerabilityData.result.severity,
        hosts: vulnerabilityData.result.host.host,
        port: vulnerabilityData.result.port,
        type: vulnerabilityData.result.threat,
        qod: vulnerabilityData.result.qod.value || '',
        description: vulnerabilityData.result.description,
        creation_time: vulnerabilityData.result?.creation_time_format!,
        report_date: networkScanReportDetail.report.report.scan_end_format!,
      };

      const response = await dispatch(createVulnerabilities([vulnerability]));
      const { managed = [], saved_correctly = [] } = response || {};
      let message = '';
      let severity: 'success' | 'warning' | 'error' = 'success';

      if (managed?.length) {
        message += `${t('vulnerabilities.management.already_managed')}: ${managed.join(', ')}. `;
        severity = 'warning';
      }
      if (saved_correctly?.length) {
        message += `${t('vulnerabilities.management.managed_successfully')}: ${saved_correctly.join(
          ', ',
        )}. `;
        severity = 'success';
      }

      if (!message) {
        message = t('vulnerabilities.management.managed_failed')!;
        severity = 'error';
      }

      setSnackbarMessage(message);
      setSnackbarSeverity(severity);
      setSnackbarOpen(true);
    } catch (error: any) {
      setSnackbarMessage(t('vulnerabilities.management.managed_failed')!);
      setSnackbarSeverity('error');
      setSnackbarOpen(true);
    }
  };

  return (
    <Grid container spacing={3}>
      {/* Vulnerability Header */}
      <Grid item xs={12}>
        <DashboardCard>
          <Box p={2}>
            <Typography variant="h5" fontWeight="bold" sx={{ color: severityColor.color }}>
              {t('vulnerabilities.severity_cvss', { severity: threat, cvss: severity })}
            </Typography>
            <Typography variant="h6" fontWeight="bold">
              {t('vulnerabilities.vulnerability_name', { name })}
            </Typography>

            <Box mt={2}>
              <Button
                variant="contained"
                color="primary"
                startIcon={<TranslateIcon />}
                sx={{ mr: 2 }}
              >
                {t('vulnerabilities.translate_button')}
              </Button>
              <Button
                variant="contained"
                color="error"
                startIcon={<ManageAccountsIcon />}
                onClick={handleManagementClick}
              >
                {t('vulnerabilities.manage_vulnerability_button')}
              </Button>
            </Box>
          </Box>
        </DashboardCard>
      </Grid>

      {/* Vulnerability Details */}
      <Grid item xs={12}>
        <DashboardCard>
          <Box p={2}>
            <Table>
              <TableBody>
                <TableRow>
                  <TableCell>
                    <strong>{t('vulnerabilities.product')}:</strong>
                  </TableCell>
                  <TableCell>{product?.value || 'NA'}</TableCell>
                </TableRow>
                <TableRow>
                  <TableCell>
                    <strong>{t('vulnerabilities.product_detection_result')}:</strong>
                  </TableCell>
                  <TableCell>OID: {product?.source.name || 'NA'}</TableCell>
                </TableRow>
                <TableRow>
                  <TableCell>
                    <strong>{t('vulnerabilities.summary')}:</strong>
                  </TableCell>
                  <TableCell>{nvt.tags.summary || 'NA'}</TableCell>
                </TableRow>

                <TableRow>
                  <TableCell>
                    <strong>{t('vulnerabilities.detection_quality')}:</strong>
                  </TableCell>
                  <TableCell>{qod.value || 'NA'}</TableCell>
                </TableRow>

                <TableRow>
                  <TableCell>
                    <strong>{t('vulnerabilities.detection_result')}:</strong>
                  </TableCell>
                  <TableCell>{description || 'NA'}</TableCell>
                </TableRow>

                <TableRow>
                  <TableCell>
                    <strong>{t('vulnerabilities.solution')}:</strong>
                  </TableCell>
                  <TableCell>
                    Type: {nvt.solution.type || 'NA'}
                    <br />
                    {nvt.solution.id || ''}
                  </TableCell>
                </TableRow>

                <TableRow>
                  <TableCell>
                    <strong>{t('vulnerabilities.software_affected')}:</strong>
                  </TableCell>
                  <TableCell>{nvt.solution.type || 'NA'}</TableCell>
                </TableRow>

                <TableRow>
                  <TableCell>
                    <strong>{t('vulnerabilities.vulnerability_info')}:</strong>
                  </TableCell>
                  <TableCell>{nvt.tags.summary || 'NA'}</TableCell>
                </TableRow>

                <TableRow>
                  <TableCell>
                    <strong>{t('vulnerabilities.detection_method')}:</strong>
                  </TableCell>
                  <TableCell>{nvt.tags.vuldetect || 'NA'}</TableCell>
                </TableRow>
                <TableRow>
                  <TableCell>
                    <strong>{t('vulnerabilities.references')}:</strong>
                  </TableCell>
                  <TableCell>
                    {Array.isArray(nvt.refs) && nvt.refs.length > 0 ? (
                      nvt.refs.map((ref: { type: string; id: string }, index: number) => (
                        <div key={index}>
                          <strong>
                            {ref.type} - {ref.id}
                          </strong>
                        </div>
                      ))
                    ) : (
                      <div>No references available</div>
                    )}
                  </TableCell>
                </TableRow>
              </TableBody>
            </Table>
            <Grid item xs={12}>
              {/* Snackbar */}
              {snackbarOpen && (
                <SnackBarInfo
                  color={snackbarSeverity}
                  title="Operation Status"
                  message={snackbarMessage}
                />
              )}
            </Grid>
          </Box>
        </DashboardCard>
      </Grid>
    </Grid>
  );
};

export default VulnerabilityDetailView;
