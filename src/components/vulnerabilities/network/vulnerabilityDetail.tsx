import ManageAccountsIcon from '@mui/icons-material/ManageAccounts';
import TranslateIcon from '@mui/icons-material/Translate';
import {Box, Button, CircularProgress, Grid, Table, TableBody, TableCell, TableRow, Typography, useTheme, Breadcrumbs, IconButton, Link} from '@mui/material';
import { useEffect, useMemo, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { useParams } from 'react-router-dom';
import DashboardCard from 'src/components/shared/DashboardCard';
import Loader from 'src/components/shared/Loader/Loader';
import SnackBarInfo from 'src/layouts/full/shared/SnackBar/SnackBarInfo';
import { fetchTranslationVulnerability } from 'src/store/sections/vulnerabilities-solutions/TranslationVulnerabilitySlice';
import { useDispatch, useSelector } from 'src/store/Store';
import { createVulnerabilities } from 'src/store/vulnerabilities/ManagementVulnSlice';
import { fetchNetworkScanReportDetail } from 'src/store/vulnerabilities/network/NetworkScansSlice';
import { NetworkScanReportDetail } from 'src/types/vulnerabilities/network/networkScansType';
import { VulnerabilityTranslateParamsType } from 'src/types/vulnerabilities/translateVulnerabilityType';
import { managementVulnerabilityType } from 'src/types/vulnerabilities/vulnerabilityManagementType';
import { getSeverityColor } from 'src/utils/severityUtils';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import { useNavigate, Link as RouterLink } from 'react-router-dom';

interface VulnerabilityDetailProps {
  reportID: string;
  scanID: string;
}

const VulnerabilityDetailView: React.FC<VulnerabilityDetailProps> = ({ reportID, scanID }) => {
  const [isLoading, setIsLoading] = useState(false);
  const [isLoadingTranslate, setIsLoadingTranslate] = useState(false);
  const [isLoadingManagement, setIsLoadingManagement] = useState(false);
  const { vulnerabilityId } = useParams<{ vulnerabilityId: string }>();
  const { index } = useParams<{ index: string }>();
  const { t } = useTranslation();
  const dispatch = useDispatch();
  const theme = useTheme();
  const navigate = useNavigate();
  const networkScanReportDetail: NetworkScanReportDetail = useSelector(
    (state: any) => state.networkScanReducer.networkScanReportDetail,
  );

  const translationVulnerability = useSelector(
    (state: any) => state.translationVulnerabilityReducer.translationVulnerability,
  );
  const [snackbarOpen, setSnackbarOpen] = useState(false); // State to control the snackbar
  const [snackbarMessage, setSnackbarMessage] = useState(''); // Message for the snackbar
  const [snackbarSeverity, setSnackbarSeverity] = useState<
    'success' | 'info' | 'warning' | 'error'
  >('success'); // Snackbar severity
  const [isTranslated, setIsTranslated] = useState(false);
  const vulnerabilityData = useMemo(() => {
    if (networkScanReportDetail?.report?.report.results && vulnerabilityId) {
      return networkScanReportDetail.report.report.results.find(
        (vuln: any) => vuln.result.id === vulnerabilityId,
      );
    }
    return null;
  }, [networkScanReportDetail, vulnerabilityId]);

  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      try {
        await dispatch(fetchNetworkScanReportDetail(scanID, reportID));
      } catch (error) {
        console.error('error', error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchData();
  }, [dispatch, scanID, reportID]);

  useEffect(() => {
    if (vulnerabilityData?.result?.name_es) {
      setIsTranslated(true);
    } else {
      setIsTranslated(false);
    }
  }, [vulnerabilityData]);

  useEffect(() => {
    if (translationVulnerability?.name_es) {
      setIsTranslated(true);
    }
  }, [translationVulnerability]);

  if (isLoading || !vulnerabilityData) {
    return (
      <Box display="flex" justifyContent="center" alignItems={'center'} mt={4} mb={4}>
        <Loader />
      </Box>
    );
  }

  const { severity, name, threat, nvt, host, qod, description, id } = vulnerabilityData.result;
  const severityColor = getSeverityColor(severity, theme);
  const product = host.details.find((obj) => obj['name'] == 'App');

  const handleManagementClick = async () => {
    setSnackbarOpen(false);
    setIsLoadingManagement(true);
    try {
      const vulnerability: managementVulnerabilityType = {
        id: id,
        name: name,
        report_id: networkScanReportDetail.id_elastic,
        tool: 'Network',
        severity: vulnerabilityData.result.severity,
        hosts: vulnerabilityData.result.host.host,
        port: vulnerabilityData.result.port,
        type: vulnerabilityData.result.threat,
        qod: vulnerabilityData.result.qod.value || '',
        description: vulnerabilityData.result.description,
        creation_time: vulnerabilityData.result?.creation_time_format!,
        report_date: networkScanReportDetail.report.report.scan_end_format!,
      };

      const response = await dispatch(createVulnerabilities([vulnerability]));
      setIsLoadingManagement(false);

      const { managed = [], saved_correctly = [] } = response || {};
      let message = '';
      let severity: 'success' | 'warning' | 'error' = 'success';

      if (managed?.length) {
        message += `${t('vulnerabilities.management.already_managed')}: ${managed.join(', ')}. `;
        severity = 'warning';
      }
      if (saved_correctly?.length) {
        message += `${t('vulnerabilities.management.managed_successfully')}: ${saved_correctly.join(
          ', ',
        )}. `;
        severity = 'success';
      }

      if (!message) {
        message = t('vulnerabilities.management.managed_failed')!;
        severity = 'error';
      }

      setSnackbarMessage(message);
      setSnackbarSeverity(severity);
      setSnackbarOpen(true);
    } catch (error: any) {
      setSnackbarMessage(t('vulnerabilities.management.managed_failed')!);
      setSnackbarSeverity('error');
      setSnackbarOpen(true);
    }
  };

  const handleTranslateClick = async () => {
    if (isTranslated) {
      setIsTranslated(false);
      return;
    }
    setSnackbarOpen(false);

    if (vulnerabilityData.result.name_es) {
      setIsTranslated(true);
      return;
    }

    setIsLoadingTranslate(true);

    try {
      const translationParams: VulnerabilityTranslateParamsType = {
        affectedSoftware: nvt.tags.affected || 'NA',
        description: description || 'NA',
        detectionMethod: nvt.tags.vuldetect || 'NA',
        idsolution: nvt.solution.id || 'NA',
        indexList: index!,
        name: name || 'NA',
        solution: nvt.solution.id || 'Type: ',
        summary: nvt.tags.summary || 'NA',
        tool: 'openvas',
        dataId: reportID!,
      };

      await dispatch(fetchTranslationVulnerability(translationParams));
      setIsTranslated(true);
    } catch (error) {
      console.error('Error translating vulnerability:', error);
      setSnackbarMessage(t('vulnerabilities.scan_failed')!);
      setSnackbarSeverity('error');
      setSnackbarOpen(true);
    } finally {
      setIsLoadingTranslate(false);
    }
  };

  return (
    <Box mb={3}>
      <Box display="flex" alignItems="center" mt={2}  mb={3}>
                <IconButton onClick={() => navigate(-1)} color="primary">
                  <ArrowBackIcon />
                </IconButton>
                <Breadcrumbs aria-label="breadcrumb">
                  <Link component={RouterLink} color="inherit" to="/vulnerabilities/network/scans">
                    {t('vulnerabilities.breadcrumb_vulnerabilidades')}
                  </Link>
                  <Link
                    component={RouterLink}
                    color="inherit"
                    to={`/vulnerabilities/network/scans/${scanID}`}
                  >
                    {t('vulnerabilities.breadcrumb_red')}
                  </Link>
                  <Link
                    component={RouterLink}
                    color="inherit"
                    to={`/vulnerabilities/network/scans/detail/${scanID}`}
                  >
                    {t('vulnerabilities.detail')}
                  </Link>
                  {scanID && (
                    <Typography color="textPrimary">
                      {scanID}
                    </Typography>
                  )}
                  {reportID && (
                    <Link
                      component={RouterLink}
                      color="inherit"
                      to={`/vulnerabilities/network/scans/detail/${scanID}`}
                    >
                      {t('vulnerabilities.reports')}
                    </Link>
                  )}
                  {reportID && (
                    <Typography color="textPrimary">
                      {reportID}
                    </Typography>
                  )}
                  {vulnerabilityId && (
                    <Link
                      component={RouterLink}
                      color="inherit"
                      to={`/vulnerabilities/network/scans/detail/${scanID}/reports/${reportID}`}
                    >
                      {t('vulnerabilities.vulnerabilities')}
                    </Link>
                  )}
                  {vulnerabilityId && (
                    <Typography color="textPrimary">
                      {vulnerabilityId}
                    </Typography>
                  )}
                </Breadcrumbs>
              </Box>
    <Grid container spacing={3}>
      {/* Vulnerability Header */}
      <Grid item xs={12}>
        <DashboardCard>
          <Box p={2}>
            <Typography variant="h5" fontWeight="bold" sx={{ color: severityColor.color }}>
              {t('vulnerabilities.severity_cvss', { severity: threat, cvss: severity })}
            </Typography>
            <Typography variant="h6" fontWeight="bold">
              {t('vulnerabilities.vulnerability_name', {
                name: vulnerabilityData.result.name_es ? vulnerabilityData.result.name_es : vulnerabilityData.result.name,
              })}
            </Typography>
            <Box mt={2}>
              <Button
                variant="contained"
                color="primary"
                startIcon={
                  isLoadingTranslate ? (
                    <CircularProgress size={16} color="inherit" />
                  ) : (
                    <TranslateIcon />
                  )
                }
                sx={{ mr: 2 }}
                onClick={handleTranslateClick}
                disabled={isLoadingTranslate}
              >
                {isTranslated
                  ? t('vulnerabilities.translate_button_en')
                  : t('vulnerabilities.translate_button_es')}{' '}
              </Button>
              {threat !== 'LOG' && (
                <Button
                  variant="contained"
                  color="error"
                  startIcon={
                    isLoadingManagement ? (
                      <CircularProgress size={16} color="inherit" />
                    ) : (
                      <ManageAccountsIcon />
                    )
                  }
                  onClick={handleManagementClick}
                  disabled={isLoadingManagement}
                >
                  {t('vulnerabilities.manage_vulnerability_button')}
                </Button>
              )}
            </Box>
          </Box>
        </DashboardCard>
      </Grid>

      {/* Vulnerability Details */}
      <Grid item xs={12}>
        <DashboardCard>
          <Box p={2}>
            <Table>
              <TableBody>
                <TableRow>
                  <TableCell>
                    <strong>{t('vulnerabilities.product')}:</strong>
                  </TableCell>
                  <TableCell>{product?.value || 'NA'}</TableCell>
                </TableRow>
                <TableRow>
                  <TableCell>
                    <strong>{t('vulnerabilities.product_detection_result')}:</strong>
                  </TableCell>
                  <TableCell>OID: {product?.source.name || 'NA'}</TableCell>
                </TableRow>
                <TableRow>
                  <TableCell>
                    <strong>{t('vulnerabilities.summary')}:</strong>
                  </TableCell>
                  <TableCell>
                    {nvt.tags?.summary_es ? nvt.tags?.summary_es : nvt.tags.summary || 'NA'}
                  </TableCell>
                </TableRow>

                <TableRow>
                  <TableCell>
                    <strong>{t('vulnerabilities.detection_quality')}:</strong>
                  </TableCell>
                  <TableCell>{qod.value || 'NA'}</TableCell>
                </TableRow>

                <TableRow>
                  <TableCell>
                    <strong>{t('vulnerabilities.detection_result')}:</strong>
                  </TableCell>
                  <TableCell>
                    {vulnerabilityData.result.description_es ? vulnerabilityData.result.description_es : description || 'NA'}
                  </TableCell>
                </TableRow>

                <TableRow>
                  <TableCell>
                    <strong>{t('vulnerabilities.solution')}:</strong>
                  </TableCell>
                  <TableCell>
                    Type: {nvt.solution.type || ' No Type'}
                    <br />
                    {nvt.solution.id_es
                      ? nvt.solution.id_es
                      : nvt.solution.id || 'NA'}
                  </TableCell>
                </TableRow>

                <TableRow>
                  <TableCell>
                    <strong>{t('vulnerabilities.software_affected')}:</strong>
                  </TableCell>
                  <TableCell>
                    {nvt.solution.type_es
                      ? nvt.solution.type_es
                      : nvt.solution.type || 'NA'}
                  </TableCell>
                </TableRow>

                <TableRow>
                  <TableCell>
                    <strong>{t('vulnerabilities.detection_method')}:</strong>
                  </TableCell>
                  <TableCell>
                    {nvt.tags.vuldetect_es ? nvt.tags.vuldetect_es : nvt.tags.vuldetect}
                  </TableCell>
                </TableRow>
                <TableRow>
                  <TableCell>
                    <strong>{t('vulnerabilities.references')}:</strong>
                  </TableCell>
                  <TableCell>
                    {Array.isArray(nvt.refs) && nvt.refs.length > 0 ? (
                      nvt.refs.map((ref: { type: string; id: string }, index: number) => (
                        <div key={index}>
                          <strong>
                            {ref.type} - {ref.id}
                          </strong>
                        </div>
                      ))
                    ) : (
                      <div>{t('vulnerabilities.not_available')}</div>
                    )}
                  </TableCell>
                </TableRow>
              </TableBody>
            </Table>
            <Grid item xs={12}>
              {/* Snackbar */}
              {snackbarOpen && (
                <SnackBarInfo
                  color={snackbarSeverity}
                  title="Operation Status"
                  message={snackbarMessage}
                />
              )}
            </Grid>
          </Box>
        </DashboardCard>
      </Grid>
    </Grid>
  </Box>
  );
};

export default VulnerabilityDetailView;
