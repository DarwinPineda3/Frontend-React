import React, { useState, useEffect } from 'react';
import { Grid, Typography, Box, Table, TableBody, TableCell, TableRow, Button } from "@mui/material";
import DashboardCard from 'src/components/shared/DashboardCard';

// Mock API function to fetch vulnerability data
const fetchVulnerabilityData = async () => {
  // Simulating an API call with mock JSON data
  return {
    "severity": "LOW",
    "cvss": "2.6",
    "name": "TCP Timestamps Information Disclosure",
    "detection": {
      "product": "cpe:/a:hubspot:hubspot:11.1.21 OID: 1.3.6.1.4.1.25623.1.0.113634",
      "summary": "NA",
      "detectionQuality": "80",
      "result": "It was detected that the host implements RFC1323/RFC7323. The following timestamps were retrieved with a delay of 1 second in-between: Packet 1: 159460737, Packet 2: 4281332233",
      "solution": "Type:",
      "softwareAffected": "NA",
      "vulnerabilityInfo": "The remote host implements TCP timestamps and therefore allows to compute the uptime.",
      "detectionMethod": "NA",
      "references": [
        "https://datatracker.ietf.org/doc/html/rfc1323",
        "https://datatracker.ietf.org/doc/html/rfc7323",
        "https://web.archive.org/web/20151213072445/http://www.microsoft.com/en-us/download/details.aspx?id=9152",
        "https://www.fortiguard.com/psirt/FG-IR-16-090"
      ]
    }
  };
};

const VulnerabilityDetailView = () => {
  const [vulnerabilityData, setVulnerabilityData] = useState<any>(null);

  useEffect(() => {
    const getData = async () => {
      const data = await fetchVulnerabilityData();
      setVulnerabilityData(data);
    };
    getData();
  }, []);

  if (!vulnerabilityData) {
    return <Typography>Loading...</Typography>;
  }

  const { severity, cvss, name, detection } = vulnerabilityData;

  return (
    <Grid container spacing={3}>
      {/* Vulnerability Header */}
      <Grid item xs={12}>
        <DashboardCard>
          <Box p={2}>
            <Typography variant="h5" fontWeight="bold" color="success.main">
              {severity} (CVSS: {cvss})
            </Typography>
            <Typography variant="h6" fontWeight="bold">
              {name}
            </Typography>

            <Box mt={2}>
              <Button variant="contained" color="primary" sx={{ mr: 2 }}>
                Translate to Spanish
              </Button>
              <Button variant="contained" color="error">
                Manage Vulnerability
              </Button>
            </Box>
          </Box>
        </DashboardCard>
      </Grid>

      {/* Vulnerability Details */}
      <Grid item xs={12}>
        <DashboardCard>
          <Box p={2}>
            <Table>
              <TableBody>
                <TableRow>
                  <TableCell><strong>Resultado de la detección del producto:</strong></TableCell>
                  <TableCell>{detection.product}</TableCell>
                </TableRow>
                <TableRow>
                  <TableCell><strong>Resumen:</strong></TableCell>
                  <TableCell>{detection.summary}</TableCell>
                </TableRow>
                <TableRow>
                  <TableCell><strong>Calidad de detección:</strong></TableCell>
                  <TableCell>{detection.detectionQuality}</TableCell>
                </TableRow>
                <TableRow>
                  <TableCell><strong>Resultado de la detección de vulnerabilidades:</strong></TableCell>
                  <TableCell>{detection.result}</TableCell>
                </TableRow>
                <TableRow>
                  <TableCell><strong>Solución:</strong></TableCell>
                  <TableCell>{detection.solution}</TableCell>
                </TableRow>
                <TableRow>
                  <TableCell><strong>Software/SO afectado:</strong></TableCell>
                  <TableCell>{detection.softwareAffected}</TableCell>
                </TableRow>
                <TableRow>
                  <TableCell><strong>Información sobre vulnerabilidades:</strong></TableCell>
                  <TableCell>{detection.vulnerabilityInfo}</TableCell>
                </TableRow>
                <TableRow>
                  <TableCell><strong>Método de detección de vulnerabilidades:</strong></TableCell>
                  <TableCell>{detection.detectionMethod}</TableCell>
                </TableRow>
                <TableRow>
                  <TableCell><strong>Referencias:</strong></TableCell>
                  <TableCell>
                    {detection.references.map((ref: string, index: number) => (
                      <div key={index}>
                        <a href={ref} target="_blank" rel="noopener noreferrer">{ref}</a>
                      </div>
                    ))}
                  </TableCell>
                </TableRow>
              </TableBody>
            </Table>
          </Box>
        </DashboardCard>
      </Grid>
    </Grid>
  );
};

export default VulnerabilityDetailView;
