import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import InsertLinkIcon from '@mui/icons-material/InsertLink';
import { Box, Breadcrumbs, Grid, IconButton, Link, Pagination, Table, TableBody, TableCell, TableHead, TableRow, Typography } from '@mui/material';
import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { Link as RouterLink, useLocation, useNavigate } from 'react-router-dom';
import PageContainer from 'src/components/container/PageContainer';
import DashboardCard from 'src/components/shared/DashboardCard';

const WpVulDetail: React.FC = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const location = useLocation();

  const vulns_nvd = location.state?.vulns_nvd;


  const [currentPage, setCurrentPage] = useState(1);
  const rowsPerPage = 10;

  const totalPages = Math.ceil(vulns_nvd?.length / rowsPerPage);

  const handlePageChange = (event: any, value: any) => {
    setCurrentPage(value);
  };

  const currentData = vulns_nvd?.slice((currentPage - 1) * rowsPerPage, currentPage * rowsPerPage);


  return (
    <>
      <PageContainer title="Akila">
        <Box mb={2}>
          <Box display="flex" alignItems="center" mt={2}>
            <IconButton onClick={() => navigate(-1)} color="primary">
              <ArrowBackIcon />
            </IconButton>
            <Breadcrumbs aria-label="breadcrumb">
              <Link component={RouterLink} color="inherit" to="/vulnerabilities/web">
                {t('menu.vulnerabilities')}
              </Link>
              <Link component={RouterLink} color="inherit" to="/vulnerabilities/web/wordpress">
                {t('menu.wordpress')}
              </Link>

              <Link component={RouterLink} color="inherit" to={`/vulnerabilities/web/wordpress/`}> {/* ${selectedScan} */}
                {t('vulnerabilities.wordpress_scans')}
              </Link>

              <Typography color="textPrimary">
                {t('vulnerabilities.vulnerability')}
              </Typography>
            </Breadcrumbs>
          </Box>
        </Box>
          <DashboardCard title={t('vulnerabilities.vuln_details')!}>
            <Box mt={4} mb={2}>
              <Grid container spacing={3}>
                <Grid item xs={12}>
                  <Table>
                    <TableHead>
                      <TableRow>
                        <TableCell>
                          <Typography variant="subtitle2" fontWeight={600}>
                            {t('vulnerabilities.id')}
                          </Typography>
                        </TableCell>
                        <TableCell>
                          <Typography variant="subtitle2" fontWeight={600}>
                            {t('vulnerabilities.score')}
                          </Typography>
                        </TableCell>
                        <TableCell>
                          <Typography variant="subtitle2" fontWeight={600}>
                            {t('vulnerabilities.severity')}
                          </Typography>
                        </TableCell>
                        <TableCell>
                          <Typography variant="subtitle2" fontWeight={600}>
                            {t('vulnerabilities.description')}
                          </Typography>
                        </TableCell>
                        <TableCell>
                          <Typography variant="subtitle2" fontWeight={600}>
                            {t('vulnerabilities.weaknesses')}
                          </Typography>
                        </TableCell>
                        <TableCell>
                          <Typography variant="subtitle2" fontWeight={600}>
                            {t('vulnerabilities.references')}
                          </Typography>
                        </TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {currentData?.map((vulnerability:any, index:any) => (
                        <TableRow key={index}>
                          <TableCell>
                            <Typography variant="body2">{vulnerability?.cve?.id}</Typography>
                          </TableCell>
                          <TableCell>
                            <Typography variant="body2">{vulnerability?.cve?.metrics?.cvssMetricV31[0]?.cvssData?.baseScore}</Typography>
                          </TableCell>
                          <TableCell>
                            <Typography variant="body2">{vulnerability?.cve?.metrics?.cvssMetricV31[0]?.cvssData?.baseSeverity}</Typography>
                          </TableCell>
                          <TableCell>
                            <Typography variant="body2">{vulnerability?.cve?.descriptions[0]?.value}</Typography>
                          </TableCell>
                          <TableCell>
                            {vulnerability?.cve?.weaknesses?.map((weakness: any, idx: any) => (
                              <Typography key={idx} variant="body2">
                                {weakness?.description?.map((desc: any, j: any) => (
                                  <span key={j}>{desc.value}</span>
                                ))}
                              </Typography>
                            ))}
                          </TableCell>
                          <TableCell>
                            {vulnerability?.cve?.references?.map((ref: any, idx: any) => (
                              <Link key={idx} href={ref.url} target="_blank" rel="noopener">
                                <InsertLinkIcon />
                              </Link>
                            ))}
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </Grid>
              </Grid>
            </Box>
            <Box my={3} display="flex" justifyContent="center">
          {totalPages > 0 && (
            <Pagination
              count={totalPages}
              color="primary"
              page={currentPage}
              onChange={handlePageChange}
            />
          )}
        </Box>
          </DashboardCard>
      </PageContainer>
    </>
  );
};

export default WpVulDetail;