import React, { useState } from 'react';
import {
  Typography,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  TableContainer,
  Box,
  Pagination,
  Button,
  IconButton,
  Dialog,
  DialogContent,
} from '@mui/material';
import AddIcon from '@mui/icons-material/Add';
import DashboardCard from '../../shared/DashboardCard';
import { useDispatch, useSelector } from 'src/store/Store';
import { fetchMalwareAnalyses, setPage } from 'src/store/sections/MalwareAnalysisSlice';
// import CreateUpdateAsset from './AssetEdition';
import SnackBarInfo from 'src/layouts/full/shared/SnackBar/SnackBarInfo';

const MalwareAnalysisList = () => {
  const dispatch = useDispatch();
  const malwareAnalyses = useSelector((state: any) => state.malwareAnalysesReducer.malwareAnalyses);
  const currentPage = useSelector((state: any) => state.malwareAnalysesReducer.page);
  const totalPages = useSelector((state: any) => state.malwareAnalysesReducer.totalPages);
  const [editMalwareAnalysis, setEditMalwareAnalysis] = useState<null | any>(null); // State to hold the malwareAnalysis being edited or created
  const [openDialog, setOpenDialog] = useState(false); // State to control the dialog/modal
  const [snackbarOpen, setSnackbarOpen] = useState(false); // State to control the snackbar
  const [snackbarMessage, setSnackbarMessage] = useState(''); // Message for the snackbar
  const [snackbarSeverity, setSnackbarSeverity] = useState<'success' | 'info' | 'warning' | 'error'>('success'); // Snackbar severity

  React.useEffect(() => {
    dispatch(fetchMalwareAnalyses(currentPage));
  }, [dispatch, currentPage]);

  const handlePageChange = (event: React.ChangeEvent<unknown>, page: number) => {
    if (page !== currentPage) {
      dispatch(setPage(page));
    }
  };

  const handleEditClick = (malwareAnalysis: any = null) => {
    setEditMalwareAnalysis(malwareAnalysis); // Set the selected malwareAnalysis for editing, or null for new malwareAnalysis creation
    setOpenDialog(true); // Open the dialog/modal
  };

  const handleCloseDialog = () => {
    setOpenDialog(false);
    setEditMalwareAnalysis(null); // Reset the edit state when closing
  };

  const handleSnackbarClose = () => {
    setSnackbarOpen(false);
  };

  // Callback when the asset is created or updated
  const handleFormSubmit = (message: string, severity: 'success' | 'info' | 'warning' | 'error') => {
    setSnackbarMessage(message);
    setSnackbarSeverity(severity);
    setSnackbarOpen(false); // Ensure snackbar is reset
    setTimeout(() => {
      setSnackbarOpen(true); // Show the snackbar after resetting it
    }, 0);
    handleCloseDialog(); // Close the dialog after submission
  };
  
  const addButton =<IconButton color="primary" onClick={() => handleEditClick(undefined)}><AddIcon /></IconButton>

  return (
    <DashboardCard title="Malware analysis List" subtitle="List of Available Malware analyses" action={addButton}>
      <Box>    
        <TableContainer>
          <Table aria-label="malwareAnalysis table" sx={{ whiteSpace: 'nowrap' }}>
            <TableHead>
              <TableRow>
                <TableCell>
                  <Typography variant="subtitle2" fontWeight={600}>
                    Target
                  </Typography>
                </TableCell>
                <TableCell>
                  <Typography variant="subtitle2" fontWeight={600}>
                    Media Type
                  </Typography>
                </TableCell>
                <TableCell>
                  <Typography variant="subtitle2" fontWeight={600}>
                    State
                  </Typography>
                </TableCell>
                <TableCell>
                  <Typography variant="subtitle2" fontWeight={600}>
                    Score
                  </Typography>
                </TableCell>
                <TableCell>
                  <Typography variant="subtitle2" fontWeight={600}>
                    createdOn
                  </Typography>
                </TableCell>
                <TableCell>
                  <Typography variant="subtitle2" fontWeight={600}>
                    Actions
                  </Typography>
                  {/* Add New Asset Button */}

                </TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {malwareAnalyses.map((malwareAnalysis: any, index: number) => (
                <TableRow key={index}>
                  <TableCell>
                    <Typography variant="subtitle2" fontWeight={600}>
                      {malwareAnalysis.target}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Typography color="textSecondary" variant="subtitle2" fontWeight={400}>
                      {malwareAnalysis.mediaType}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Typography color="textSecondary" variant="subtitle2" fontWeight={400}>
                      {malwareAnalysis.state}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Typography variant="subtitle2">
                        {malwareAnalysis.Score}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Typography variant="subtitle2">
                        {malwareAnalysis.createdOn}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Button
                      variant="contained"
                      color="primary"
                      size="small"
                      onClick={() => handleEditClick(malwareAnalysis)}
                    >
                      Edit
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
        <Box my={3} display="flex" justifyContent={'center'}>
          <Pagination
            count={totalPages}
            color="primary"
            page={currentPage}
            onChange={handlePageChange}
          />
        </Box>
        {/* Edit/Create MalwareAnalysis Dialog/Modal */}
      <Dialog open={openDialog} onClose={handleCloseDialog} maxWidth="sm" fullWidth >
        <DialogContent sx={{ padding: '50px' }}>
          {/*<CreateUpdateAsset malwareAnalysis={editMalwareAnalysis ?? undefined} onSubmit={handleFormSubmit} />  Pass the onSubmit callback */}
        </DialogContent>
      </Dialog>

      {/* Snackbar */}
      {snackbarOpen && (
        <SnackBarInfo
          color={snackbarSeverity}
          title="Operation Status"
          message={snackbarMessage}
        />
      )}
      </Box>

      
    </DashboardCard>
  );
};

export default MalwareAnalysisList;
