import AddIcon from '@mui/icons-material/Add';
import {
  Box,
  Chip,
  Dialog,
  DialogContent,
  IconButton,
  Pagination,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Typography,
  useTheme
} from '@mui/material';
import _ from 'lodash';
import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import HumanizedDate from 'src/components/shared/HumanizedDate';
import SnackBarInfo from 'src/layouts/full/shared/SnackBar/SnackBarInfo';
import { useDispatch, useSelector } from 'src/store/Store';
import { fetchMalwareAnalyses, setPage } from 'src/store/sections/malware-analysis/MalwareAnalysisSlice';
import DashboardCard from '../../../shared/DashboardCard';
import CreateUpdateMalwareAnalysis from './MalwareAnalysisEdition';

interface MalwareAnalysisListTableProps {
  onMalwareAnalysisClick: (malwareAnalysisId: string, malwareFileName: string) => void;
}

const MalwareAnalysisList: React.FC<MalwareAnalysisListTableProps> = ({ onMalwareAnalysisClick }) => {
  const dispatch = useDispatch();
  const malwareAnalyses = useSelector((state: any) => state.malwareAnalysesReducer.malwareAnalyses);
  const currentPage = useSelector((state: any) => state.malwareAnalysesReducer.page);
  const totalPages = useSelector((state: any) => state.malwareAnalysesReducer.totalPages);
  const [editMalwareAnalysis, setEditMalwareAnalysis] = useState<null | any>(null); // State to hold the malwareAnalysis being edited or created
  const [openDialog, setOpenDialog] = useState(false); // State to control the dialog/modal
  const [snackbarOpen, setSnackbarOpen] = useState(false); // State to control the snackbar
  const [snackbarMessage, setSnackbarMessage] = useState(''); // Message for the snackbar
  const [snackbarSeverity, setSnackbarSeverity] = useState<'success' | 'info' | 'warning' | 'error'>('success'); // Snackbar severity
  const { t } = useTranslation();

  React.useEffect(() => {
    dispatch(fetchMalwareAnalyses(currentPage));
  }, [dispatch, currentPage]);

  const handlePageChange = (event: React.ChangeEvent<unknown>, page: number) => {
    if (page !== currentPage) {
      dispatch(setPage(page));
    }
  };

  const handleEditClick = (malwareAnalysis: any = null) => {
    setEditMalwareAnalysis(malwareAnalysis); // Set the selected malwareAnalysis for editing, or null for new malwareAnalysis creation
    setOpenDialog(true); // Open the dialog/modal
  };

  const handleCloseDialog = () => {
    setOpenDialog(false);
    setEditMalwareAnalysis(null); // Reset the edit state when closing
  };

  const handleSnackbarClose = () => {
    setSnackbarOpen(false);
  };

  const theme = useTheme();
  const { high, medium, low, critical } = theme.palette.level;

  // Callback when the asset is created or updated
  const handleFormSubmit = (message: string, severity: 'success' | 'info' | 'warning' | 'error') => {
    setSnackbarMessage(message);
    setSnackbarSeverity(severity);
    setSnackbarOpen(false); // Ensure snackbar is reset
    setTimeout(() => {
      setSnackbarOpen(true); // Show the snackbar after resetting it
    }, 0);
    handleCloseDialog(); // Close the dialog after submission
  };

  const addButton = <IconButton color="primary" onClick={() => handleEditClick(undefined)}><AddIcon /></IconButton>

  return (
    <DashboardCard
      title={t("malware.malware_analysys")}
      subtitle={t("malware.malware_analysys_list")}
      action={addButton}
    >
      <Box>
        <TableContainer>
          <Table aria-label="malwareAnalysis table" sx={{ whiteSpace: 'nowrap' }}>
            <TableHead>
              <TableRow>
                <TableCell>
                  <Typography variant="subtitle2" fontWeight={600}>
                    {t("malware.target")}
                  </Typography>
                </TableCell>
                <TableCell>
                  <Typography variant="subtitle2" fontWeight={600}>
                    {t("malware.media_type")}
                  </Typography>
                </TableCell>
                <TableCell>
                  <Typography variant="subtitle2" fontWeight={600}>
                    {t("malware.score")}
                  </Typography>
                </TableCell>
                <TableCell>
                  <Typography variant="subtitle2" fontWeight={600}>
                    {t("malware.created_on")}
                  </Typography>
                </TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {malwareAnalyses.map((malwareAnalysis: any, index: number) => {

                return (
                  <TableRow key={index}>
                    <TableCell>
                      <Typography
                        variant="subtitle2"
                        fontWeight={600}
                        color="primary"
                        component="a"
                        onClick={() =>
                          onMalwareAnalysisClick(
                            malwareAnalysis.id,
                            malwareAnalysis.target
                          )
                        }
                        style={{ cursor: 'pointer' }}
                      >
                        {malwareAnalysis.target}
                      </Typography>
                    </TableCell>
                    <TableCell>
                      <Typography color="textSecondary" variant="subtitle2" fontWeight={400}
                      >
                        {malwareAnalysis.mediaType}
                      </Typography>
                    </TableCell>
                    <TableCell>
                      <Typography variant="subtitle2">
                        <Chip
                          label={t(`dashboard.${_.lowerCase(malwareAnalysis.score)}`)}
                          color="secondary"
                          size="small"
                          style={{
                            backgroundColor:
                              malwareAnalysis.score === 'Critical'
                                ? critical
                                : malwareAnalysis.score === 'High'
                                  ? high
                                  : malwareAnalysis.score === 'Medium'
                                    ? medium
                                    : low,
                            color: '#fff',
                          }}
                        />
                      </Typography>
                    </TableCell>
                    <TableCell>
                      <Typography variant="subtitle2">
                        <HumanizedDate dateString={malwareAnalysis.createdOn} />
                      </Typography>
                    </TableCell>
                  </TableRow>
                );
              })}
            </TableBody>
          </Table>
        </TableContainer>
        <Box my={3} display="flex" justifyContent="center">
          <Pagination
            count={totalPages}
            color="primary"
            page={currentPage}
            onChange={handlePageChange}
          />
        </Box>
        {/* Edit/Create MalwareAnalysis Dialog/Modal */}
        <Dialog open={openDialog} onClose={handleCloseDialog} maxWidth="sm" fullWidth>
          <DialogContent sx={{ padding: '50px' }}>
            <CreateUpdateMalwareAnalysis
              malwareAnalysis={editMalwareAnalysis ?? undefined}
              onSubmit={handleFormSubmit}
            />
          </DialogContent>
        </Dialog>

        {/* Snackbar */}
        {snackbarOpen && (
          <SnackBarInfo
            color={snackbarSeverity}
            title="Operation Status"
            message={snackbarMessage}
          />
        )}
      </Box>
    </DashboardCard>
  );

};

export default MalwareAnalysisList;
