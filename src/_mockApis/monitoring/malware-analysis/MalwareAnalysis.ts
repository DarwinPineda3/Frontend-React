// home/MalwareAnalysis.ts

import mock from '../../mock'; // Ensure correct path to mock


interface MalwareAnalysisType {
  id: string | undefined;
  target: string;
  mediaType: string;
  state: string;
  score: string;
  createdOn?: Date;
}

let malwareAnalyses: MalwareAnalysisType[] = [
  {
    "id": "6f15ef",
    "target": "file35.txt",
    "mediaType": "text/plain",
    "state": "Pending",
    "score": "Critical",
    "createdOn": new Date('2024-09-22')
  },
  {
    "id": "6838b2",
    "target": "file95.jpg",
    "mediaType": "image/jpeg",
    "state": "Completed",
    "score": "Low",
    "createdOn": new Date('2024-09-21')
  },
  {
    "id": "1ecd83",
    "target": "file73.pdf",
    "mediaType": "application/pdf",
    "state": "Pending",
    "score": "High",
    "createdOn": new Date('2024-09-21')
  },
  {
    "id": "21ebab",
    "target": "file15.mp4",
    "mediaType": "video/mp4",
    "state": "Failed",
    "score": "Medium",
    "createdOn": new Date('2024-09-22')
  },
  {
    "id": "33c16f",
    "target": "file5.txt",
    "mediaType": "text/plain",
    "state": "Failed",
    "score": "Low",
    "createdOn": new Date('2024-09-22')
  },
  {
    "id": "e3927c",
    "target": "file8.jpg",
    "mediaType": "image/jpeg",
    "state": "Completed",
    "score": "Medium",
    "createdOn": new Date('2024-09-21')
  },
  {
    "id": "54f2a2",
    "target": "file23.txt",
    "mediaType": "text/plain",
    "state": "Failed",
    "score": "Critical",
    "createdOn": new Date('2024-09-22')
  },
  {
    "id": "b9acf6",
    "target": "file6.docx",
    "mediaType": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
    "state": "Completed",
    "score": "Critical",
    "createdOn": new Date('2024-09-22')
  },
  {
    "id": "b30530",
    "target": "file65.docx",
    "mediaType": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
    "state": "Pending",
    "score": "Low",
    "createdOn": new Date('2024-09-22')
  },
  {
    "id": "db516f",
    "target": "file92.txt",
    "mediaType": "text/plain",
    "state": "Pending",
    "score": "Critical",
    "createdOn": new Date('2024-09-21')
  }
];

// GET: Fetch paginated malwareAnalyses
mock.onGet(new RegExp('/api/data/malwareAnalyses')).reply((config) => {
  try {
    const urlParams = new URLSearchParams(config.url!.split('?')[1]);

    const limit = 25;
    const page = parseInt(urlParams.get('page') || '1', 10); // Default to page 1

    const startIndex = (page - 1) * limit;
    const endIndex = startIndex + limit;

    const paginatedMalwareAnalyses = malwareAnalyses.slice(startIndex, endIndex);
    const totalMalwareAnalyses = malwareAnalyses.length;
    const totalPages = Math.ceil(totalMalwareAnalyses / limit);

    return [
      200,
      {
        malwareAnalyses: paginatedMalwareAnalyses,
        currentPage: page,
        totalPages,
      },
    ];
  } catch (error) {
    console.error('Error in malwareAnalyses API:', error);
    return [500, { message: 'Internal server error' }];
  }
});

// POST: Create a new malwareAnalysis
mock.onPost('/api/data/malwareAnalyses').reply((config) => {
  try {
    const { target, mediaType, state, score, createdOn } = JSON.parse(config.data);

    const newMalwareAnalysis: MalwareAnalysisType = {
      id: (malwareAnalyses.length + 1).toString(), // Simple id generation
      target,
      mediaType,
      state,
      score,
      createdOn
    };

    malwareAnalyses.push(newMalwareAnalysis); // Add new malwareAnalysis to mock database

    return [200, { malwareAnalysis: newMalwareAnalysis }];
  } catch (error) {
    console.error('Error in creating malware analysis:', error);
    return [500, { message: 'Failed to create malware analysis' }];
  }
});

// PUT: Update an existing malwareAnalysis
mock.onPut(new RegExp('/api/data/malwareAnalyses/*')).reply((config) => {
  try {
    const malwareAnalysisId = config.url!.split('/').pop(); // Extract the malwareAnalysis ID from the URL
    const updatedData = JSON.parse(config.data); // New data for the malwareAnalysis

    const malwareAnalysisIndex = malwareAnalyses.findIndex((malwareAnalysis) => malwareAnalysis.id === malwareAnalysisId);
    if (malwareAnalysisIndex === -1) {
      return [404, { message: 'Analysis malware not found' }];
    }

    malwareAnalyses[malwareAnalysisIndex] = { ...malwareAnalyses[malwareAnalysisIndex], ...updatedData }; // Update the malwareAnalysis

    return [200, { malwareAnalysis: malwareAnalyses[malwareAnalysisIndex] }];
  } catch (error) {
    console.error('Error updating malware analysis:', error);
    return [500, { message: 'Failed to update malware analysis' }];
  }
});

// DELETE: Delete an malwareAnalysis
mock.onDelete(new RegExp('/api/data/malwareAnalyses/*')).reply((config) => {
  try {
    const malwareAnalysisId = config.url!.split('/').pop(); // Extract the malwareAnalysis ID from the URL

    const malwareAnalysisIndex = malwareAnalyses.findIndex((malwareAnalysis) => malwareAnalysis.id === malwareAnalysisId);
    if (malwareAnalysisIndex === -1) {
      return [404, { message: 'Analysis malware not found' }];
    }

    malwareAnalyses.splice(malwareAnalysisIndex, 1); // Remove malwareAnalysis from the mock database

    return [200, { message: 'Analysis malware deleted successfully' }];
  } catch (error) {
    console.error('Error deleting malware analysis:', error);
    return [500, { message: 'Failed to delete malware analysis' }];
  }
});
