import { createSlice } from "@reduxjs/toolkit";
import { MalwareAnalysisType } from "src/types/monitoring/malware-analysis/malwareAnalysis";
import axios from 'src/utils/axios';
import { AppDispatch } from "../../Store";

// const API_URL = '/api/data/malwareAnalyses';
const API_URL = 'http://amunozakila2.localhost:4500/api/malware-analyses';


interface StateType {
  malwareAnalyses: MalwareAnalysisType[];
  page: number;
  totalPages: number;
  error: string | null;
}

const initialState: StateType = {
  malwareAnalyses: [],
  page: 1,
  totalPages: 1,
  error: null,
};

export const MalwareAnalysisSlice = createSlice({
  name: 'malwareAnalysis',
  initialState,
  reducers: {
    getMalwareAnalyses: (state, action) => {
      state.malwareAnalyses = Array.isArray(action.payload.malwareAnalyses) ? action.payload.malwareAnalyses : [];
      state.page = action.payload.currentPage;
      state.totalPages = action.payload.totalPages;
    },
    addMalwareAnalysis: (state, action) => {
      state.malwareAnalyses.push(action.payload);
    },
    updateMalwareAnalysis: (state, action) => {
      const index = state.malwareAnalyses.findIndex(malwareAnalysis => malwareAnalysis.id === action.payload.id);
      if (index !== -1) {
        state.malwareAnalyses[index] = action.payload;
      }
    },
    deleteMalwareAnalysis: (state, action) => {
      state.malwareAnalyses = state.malwareAnalyses.filter(malwareAnalysis => malwareAnalysis.id !== action.payload);
    },
    setPage: (state, action) => {
      state.page = action.payload;
    },
    setError: (state, action) => {
      state.error = action.payload;
    }
  }
});

export const { getMalwareAnalyses, addMalwareAnalysis, updateMalwareAnalysis, deleteMalwareAnalysis, setPage, setError } = MalwareAnalysisSlice.actions;

// Async thunk for fetching assets with pagination (READ)
export const fetchMalwareAnalyses = (page = 1) => async (dispatch: AppDispatch) => {
  try {
    const response = await axios.get(`${API_URL}`);
    const { results, count } = response.data;
    const totalPages = Math.ceil(count / 10);
    dispatch(getMalwareAnalyses({ malwareAnalyses: results, currentPage: page, totalPages })); // Dispatch to update state
  } catch (err: any) {
    console.error('Error fetching malwareAnalyses:', err);
    dispatch(setError('Failed to fetch malwareAnalyses'));
  }
};

// Async thunk for creating a new asset (CREATE)
export const createMalwareAnalysis = (newMalwareAnalysis: MalwareAnalysisType) => async (dispatch: AppDispatch) => {
  try {
    const response = await axios.post(API_URL, newMalwareAnalysis);
    dispatch(addMalwareAnalysis(response.data.malwareAnalysis)); // Assuming the server returns the created malwareAnalysis
  } catch (err: any) {
    console.error('Error creating malwareAnalysis:', err);
    dispatch(setError('Failed to create malwareAnalysis'));
  }
};

// Async thunk for updating an malwareAnalysis (UPDATE)
export const editMalwareAnalysis = (updatedMalwareAnalysis: MalwareAnalysisType) => async (dispatch: AppDispatch) => {
  try {
    const response = await axios.put(`${API_URL}/${updatedMalwareAnalysis.id}`, updatedMalwareAnalysis);
    dispatch(updateMalwareAnalysis(response.data.malwareAnalysis)); // Assuming the server returns the updated malwareAnalysis
  } catch (err: any) {
    console.error('Error updating malwareAnalysis:', err);
    dispatch(setError('Failed to update malwareAnalysis'));
  }
};

// Async thunk for deleting an malwareAnalysis (DELETE)
export const removeMalwareAnalysis = (malwareAnalysisId: string) => async (dispatch: AppDispatch) => {
  try {
    await axios.delete(`${API_URL}/${malwareAnalysisId}`);
    dispatch(deleteMalwareAnalysis(malwareAnalysisId));
  } catch (err: any) {
    console.error('Error deleting malwareAnalysis:', err);
    dispatch(setError('Failed to delete malwareAnalysis'));
  }
};

export default MalwareAnalysisSlice.reducer;
