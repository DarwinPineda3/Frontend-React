import { createSlice } from '@reduxjs/toolkit';
import axios from 'axios';
import { getBaseApiUrl } from 'src/guards/jwt/Jwt';
import { AppDispatch } from 'src/store/Store';
import {
  VulnerabilityTranslate,
  VulnerabilityTranslateParamsType,
} from 'src/types/vulnerabilities/translateVulnerabilityType';
function getApiUrl() {
  return `${getBaseApiUrl()}/vulnerabilities/translate-vulnerability/`;
}

interface StateType {
  translationVulnerability: VulnerabilityTranslate;
  error: string | null;
}

const initialState: StateType = {
  translationVulnerability: {
    name_es: '',
    summary_es: '',
    description_es: '',
    solution_id_es: '',
    affected_es: '',
    vuldetect_es: '',
  },
  error: null,
};

export const TranslationVulnerabilitySlice = createSlice({
  name: 'translation-vulnerability',
  initialState,
  reducers: {
    getTranslationVulnerability: (state, action) => {
      state.translationVulnerability = action.payload.translation;
    },
    setError: (state, action) => {
      state.error = action.payload;
    },
  },
});

export const { getTranslationVulnerability, setError } = TranslationVulnerabilitySlice.actions;

export const fetchTranslationVulnerability =
  (translationVulnerabilityParameters: VulnerabilityTranslateParamsType) =>
  async (dispatch: AppDispatch) => {
    try {
      const response = await axios.post(`${getApiUrl()}`, translationVulnerabilityParameters);
      const { translation } = response.data;
      dispatch(getTranslationVulnerability({ translation }));
    } catch (err: any) {
      console.error('Error fetching translation:', err);
      dispatch(setError('Error fetching translation'));
    }
  };
export default TranslationVulnerabilitySlice.reducer;
