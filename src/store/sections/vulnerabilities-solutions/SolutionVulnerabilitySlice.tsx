import { createSlice } from '@reduxjs/toolkit';
import axios from 'axios';
import { getBaseApiUrl } from 'src/guards/jwt/Jwt';
import { AppDispatch } from 'src/store/Store';
import { vulnerabilitySolution } from 'src/types/solutions/vulnerabilitySolution';

function getApiUrl() {
  return `${getBaseApiUrl()}/vulnerabilities/ai-solution/`;
}

interface StateType {
  vulnerabilitySolution: string;
  error: string | null;
}

const initialState: StateType = {
  vulnerabilitySolution: '',
  error: null,
};

export const VulnerabilitySolutionSlice = createSlice({
  name: 'vulnerabilities-solutions',
  initialState,
  reducers: {
    getVulnerabilitySolution: (state, action) => {
      state.vulnerabilitySolution = action.payload.solution;
    },
    setError: (state, action) => {
      state.error = action.payload;
    },
  },
});

export const { getVulnerabilitySolution, setError } = VulnerabilitySolutionSlice.actions;

export const fetchVulnerabilitySolution =
  (vulnerabilitySolutionParameters: vulnerabilitySolution) => async (dispatch: AppDispatch) => {
    try {
      const response = await axios.post(`${getApiUrl()}`, vulnerabilitySolutionParameters);
      const { solution } = response.data;
      dispatch(getVulnerabilitySolution({ solution }));
    } catch (err: any) {
      console.error('Error fetching solution:', err);
      dispatch(setError('Error fetching solution'));
    }
  };
export default VulnerabilitySolutionSlice.reducer;
